(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 9.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    112238,       2659]
NotebookOptionsPosition[    103984,       2392]
NotebookOutlinePosition[    106622,       2456]
CellTagsIndexPosition[    106579,       2453]
WindowTitle->Method - Wolfram Mathematica
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[GridBox[{
   {Cell["Q N MSPECTRAL TUTORIAL", "PacletNameCell"], Cell[TextData[{
     Cell[BoxData[
      ActionMenuBox[
       FrameBox["\<\"Related Tutorials \[RightGuillemet]\"\>",
        StripOnInput->False], {"\<\"Introduction\"\>":>
       Documentation`HelpLookup[
       "paclet:QNMspectral/tutorial/Introduction"], "\<\"Simple Example\"\>":>
       Documentation`HelpLookup[
       "paclet:QNMspectral/tutorial/SimpleExample"], "\<\"Extensions\"\>":>
       Documentation`HelpLookup[
       "paclet:QNMspectral/tutorial/Extensions"], "\<\"Method\"\>":>
       Documentation`HelpLookup["paclet:QNMspectral/tutorial/Method"]},
       Appearance->None,
       MenuAppearance->Automatic]],
      LineSpacing->{1.4, 0}],
     "\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\[ThickSpace]\
\[ThickSpace]",
     Cell[BoxData[
      ActionMenuBox[
       FrameBox["\<\"URL \[RightGuillemet]\"\>",
        StripOnInput->
         False], {"\<\"QNMspectral/tutorial/TechnicalDetails\"\>":>
       None, "\<\"Copy Mathematica url\"\>":>
       Module[{DocumentationSearch`Private`nb$}, 
        DocumentationSearch`Private`nb$ = NotebookPut[
           Notebook[{
             Cell["QNMspectral/tutorial/TechnicalDetails"]}, Visible -> 
            False]]; SelectionMove[
         DocumentationSearch`Private`nb$, All, Notebook]; 
        FrontEndTokenExecute[DocumentationSearch`Private`nb$, "Copy"]; 
        NotebookClose[DocumentationSearch`Private`nb$]; Null], 
       Delimiter, "\<\"Copy web url\"\>":>
       Module[{DocumentationSearch`Private`nb$}, 
        DocumentationSearch`Private`nb$ = NotebookPut[
           Notebook[{
             Cell[
              BoxData[
               MakeBoxes[
                Hyperlink[
                "http://reference.wolfram.com/mathematica/QNMspectral/\
tutorial/TechnicalDetails.html"], StandardForm]], "Input", TextClipboardType -> 
              "PlainText"]}, Visible -> False]]; 
        SelectionMove[DocumentationSearch`Private`nb$, All, Notebook]; 
        FrontEndTokenExecute[DocumentationSearch`Private`nb$, "Copy"]; 
        NotebookClose[DocumentationSearch`Private`nb$]; 
        Null], "\<\"Go to web url\"\>":>FrontEndExecute[{
         NotebookLocate[{
           URL[
            StringJoin[
            "http://reference.wolfram.com/mathematica/", 
             "QNMspectral/tutorial/TechnicalDetails", ".html"]], None}]}]},
       Appearance->None,
       MenuAppearance->Automatic]],
      LineSpacing->{1.4, 0}]
    }], "AnchorBar"]}
  }]], "AnchorBarGrid",
 GridBoxOptions->{GridBoxItemSize->{"Columns" -> {
     Scaled[0.65], {
      Scaled[0.34]}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
   "RowsIndexed" -> {}}},
 CellID->1],

Cell[CellGroupData[{

Cell["Method", "Title",
 CellID->509267359],

Cell[CellGroupData[{

Cell["Boundary Conditions and Eddington-Finkelstein coordinates", "Section",
 CellID->278927872],

Cell["\<\
To find the quasinormal mode spectrum, we have to solve for a linearized \
perturbation on top of a black hole/black brane, with ingoing boundary \
conditions at the horizon, and normalizability at the boundary. \
\>", "Text",
 CellID->1685543347],

Cell["\<\
It turns out that Eddington-Finkelstein coordinates are perfectly suited for \
this problem. By Eddington-Finkelstein coordinates we mean more specifically \
a metric of the form\
\>", "Text",
 CellID->65355837],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["ds", "2"], "=", 
    RowBox[{
     RowBox[{
      RowBox[{"-", 
       RowBox[{"f", "(", "r", ")"}]}], " ", 
      SuperscriptBox["dt", "2"]}], "+", 
     RowBox[{"2", 
      RowBox[{"g", "(", "r", ")"}], " ", "dt", " ", "dr"}]}]}], 
   TraditionalForm]], "InlineMath"],
 " (+ spatial part), where f(r) is the blackening factor, and g(r) depends on \
the gauge of the radial variable."
}], "Text",
 CellID->374829256],

Cell[CellGroupData[{

Cell["\<\
Consider the simple example of a massless scalar field in a 5-dimensional \
Schwarschild-AdS black brane, which can be written as\
\>", "Text",
 CellID->1617778002],

Cell[BoxData[
 RowBox[{
  RowBox[{"eq\[Phi]", "=", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "6"}], " ", "\[ImaginaryI]", " ", "\[Lambda]", " ", 
     RowBox[{"\[Delta]\[Phi]", "[", "u", "]"}]}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"-", "3"}], "-", 
       SuperscriptBox["u", "4"], "+", 
       RowBox[{"4", " ", "\[ImaginaryI]", " ", "u", " ", "\[Lambda]"}]}], 
      ")"}], " ", 
     RowBox[{
      SuperscriptBox["\[Delta]\[Phi]", "\[Prime]",
       MultilineFunction->None], "[", "u", "]"}]}], "+", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{"u", "-", 
       SuperscriptBox["u", "5"]}], ")"}], " ", 
     RowBox[{
      SuperscriptBox["\[Delta]\[Phi]", "\[Prime]\[Prime]",
       MultilineFunction->None], "[", "u", "]"}]}]}]}], ";"}]], "Input",
 InitializationCell->False,
 CellLabel->"In[63]:=",
 CellID->77585105]
}, Open  ]],

Cell[TextData[{
 "Here u=0 is the boundary and u=1 the horizon, corresponding to a gauge \
where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"g", "(", "u", ")"}], "=", 
    RowBox[{
     RowBox[{"-", "1"}], "/", 
     SuperscriptBox["u", "2"]}]}], TraditionalForm]], "InlineMath"],
 ", and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"\[Lambda]", "=", 
    RowBox[{
     RowBox[{"\[Omega]", "/", "4"}], "\[Pi]", " ", "T"}]}], TraditionalForm]],
   "InlineMath"],
 ", with \[Omega] the frequency of the perturbation and T the temperature of \
the black brane."
}], "Text",
 Deletable->True,
 CellID->660767926],

Cell[CellGroupData[{

Cell["Near the horizon there are two solutions,", "Text",
 CellID->205460912],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Series", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      SuperscriptBox[
       RowBox[{"(", 
        RowBox[{"1", "-", "u"}], ")"}], 
       RowBox[{"-", "p"}]], "eq\[Phi]"}], "/.", 
     RowBox[{"\[Delta]\[Phi]", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{"u", "\[Function]", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "-", "u"}], ")"}], "^", "p"}]}], ")"}]}]}], "//", 
    "Expand"}], ",", 
   RowBox[{"{", 
    RowBox[{"u", ",", "1", ",", 
     RowBox[{"-", "1"}]}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Normal", "[", "%", "]"}], "\[Equal]", "0"}], ",", "p"}], 
  "]"}]}], "Input",
 InitializationCell->False,
 CellLabel->"In[67]:=",
 CellID->2112883632],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{
      RowBox[{"-", "4"}], " ", 
      SuperscriptBox["p", "2"]}], "+", 
     RowBox[{"4", " ", "\[ImaginaryI]", " ", "p", " ", "\[Lambda]"}]}], 
    RowBox[{"u", "-", "1"}]], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", 
      RowBox[{"u", "-", "1"}], "]"}], "0"],
    SeriesData[$CellContext`u, 1, {}, -1, 0, 1],
    Editable->False]}],
  SeriesData[$CellContext`u, 
   1, {(-4) $CellContext`p^2 + 
    Complex[0, 4] $CellContext`p $CellContext`\[Lambda]}, -1, 0, 1],
  Editable->False]], "Output",
 ImageSize->{157, 33},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[67]=",
 CellID->1803722070],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p", "\[Rule]", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"p", "\[Rule]", 
     RowBox[{"\[ImaginaryI]", " ", "\[Lambda]"}]}], "}"}]}], "}"}]], "Output",\

 ImageSize->{129, 14},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[68]=",
 CellID->1277669438]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "One goes to a constant, and the other behaves as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Delta]\[Phi]", "(", "u", ")"}], "~", 
    SuperscriptBox[
     RowBox[{"(", 
      RowBox[{"1", "-", "u"}], ")"}], 
     RowBox[{"i", " ", "\[Lambda]"}]]}], TraditionalForm]], "InlineMath"],
 "."
}], "Text",
 Deletable->True,
 CellID->1101258113],

Cell[TextData[{
 "Including time dependence, this last solution behaves as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Delta]\[Phi]", "(", 
     RowBox[{"t", ",", "u"}], ")"}], "=", " ", 
    SuperscriptBox["e", 
     RowBox[{
      RowBox[{"-", "i"}], " ", "\[Lambda]", " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"4", " ", "\[Pi]", " ", "t", " ", "T"}], "-", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{"1", "-", "u"}], ")"}], " ", "log"}]}], ")"}]}]]}], 
   TraditionalForm]], "InlineMath"],
 ", so as t increases, 1-u has to increase as well to keep a constant phase, \
meaning u has to decrease, so this solution corresponds to an outgoing wave. \
The other solution going to a constant must then correspond to an ingoing \
wave."
}], "Text",
 Deletable->True,
 CellID->967003255],

Cell["\<\
Notice that the solution that we want, the ingoing one, is perfectly smooth, \
while the one we want to discard, the outgoing one, oscillates more and more \
rapidly as we approach the horizon. These properties will help us pick out \
the correct solution, as we will see in the next section.\
\>", "Text",
 CellID->1933901115],

Cell[CellGroupData[{

Cell["\<\
The boundary is more straightforward, again there are two solutions, now \
corresponding to a normalizable and a non-normalizable mode:\
\>", "Text",
 CellID->489084805],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Series", "[", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      SuperscriptBox[
       RowBox[{"(", "u", ")"}], 
       RowBox[{"-", "p"}]], "eq\[Phi]"}], "/.", 
     RowBox[{"\[Delta]\[Phi]", "\[Rule]", 
      RowBox[{"(", 
       RowBox[{"u", "\[Function]", 
        RowBox[{"u", "^", "p"}]}], ")"}]}]}], "//", "Expand"}], ",", 
   RowBox[{"{", 
    RowBox[{"u", ",", "0", ",", 
     RowBox[{"-", "1"}]}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Normal", "[", "%", "]"}], "\[Equal]", "0"}], ",", "p"}], 
  "]"}]}], "Input",
 InitializationCell->False,
 CellLabel->"In[71]:=",
 CellID->569349032],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   FractionBox[
    RowBox[{
     RowBox[{
      RowBox[{"-", "4"}], " ", "p"}], "+", 
     SuperscriptBox["p", "2"]}], "u"], "+", 
   InterpretationBox[
    SuperscriptBox[
     RowBox[{"O", "[", "u", "]"}], "0"],
    SeriesData[$CellContext`u, 0, {}, -1, 0, 1],
    Editable->False]}],
  SeriesData[$CellContext`u, 0, {(-4) $CellContext`p + $CellContext`p^2}, -1, 
   0, 1],
  Editable->False]], "Output",
 ImageSize->{107, 33},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[71]=",
 CellID->1862883090],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"p", "\[Rule]", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"p", "\[Rule]", "4"}], "}"}]}], "}"}]], "Output",
 ImageSize->{119, 14},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[72]=",
 CellID->1312004017]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 "The solution going to a constant is the non-normalizable mode, while the \
one going like  ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Delta]\[Phi]", "(", "u", ")"}], "~", 
    SuperscriptBox["u", "4"]}], TraditionalForm]], "InlineMath"],
 " is the normalizable mode."
}], "Text",
 Deletable->True,
 CellID->489426323],

Cell[TextData[{
 "This boundary condition can be easily dealt with by rescaling the \
fluctuation ",
 Cell[BoxData[
  FormBox["\[Delta]\[Phi]", TraditionalForm]], "InlineMath"],
 " with a power of the radial variable in such a way that the \
non-normalizable mode becomes divergent, while the normalizable one remains \
finite. In this case we could for example rescale ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[Delta]\[Phi]", "(", "u", ")"}], " ", "=", " ", 
    RowBox[{
     SuperscriptBox["u", "4"], 
     RowBox[{"\[Delta]\[Psi]", "(", "u", ")"}]}]}], TraditionalForm]], 
  "InlineMath"],
 ", so that the normalizable mode goes to a constant while the \
non-normalizable one diverges with a fourth power of u. "
}], "Text",
 Deletable->True,
 CellID->1754192859],

Cell["We will see in the next section how this helps.", "Text",
 CellID->592404874],

Cell[CellGroupData[{

Cell["Asymptotically flat case", "Subsection",
 CellID->1478924877],

Cell["\<\
Unfortunately in the asymptotically flat case, the boundary is no longer a \
regular singular point, as it is in the asymptotically AdS case, but also in \
the asymptotically Lifshitz case, but an actual singular point. As a \
consequence the method used in this package does not apply to this case.\
\>", "Text",
 CellID->664198110]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Discretization: Pseudospectral Methods", "Section",
 CellID->1481255430],

Cell["\<\
The pseudospectral method solves a (differential) equation by replacing a \
continuous variable, the radial one in our application, by a discrete set of \
points, also called collocation points. The collection of these points is \
usually called the grid.\
\>", "Text",
 CellID->1713154644],

Cell["\<\
A function can then be represented as the values the function takes on the \
gridpoints. An equivalent and useful way of looking at this set of numbers \
representing a particular function is as coefficients of the so called \
cardinal functions.\
\>", "Text",
 CellID->780243156],

Cell[TextData[{
 "For a grid ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       SubscriptBox["x", "i"], "|", " ", "i"}], " ", "=", " ", "0"}], ",", "...",
      ",", " ", "N"}], "}"}], TraditionalForm]], "InlineMath"],
 " the corresponding cardinal functions are polynomials of order (at most) \
N+1, ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{
     RowBox[{
      RowBox[{
       SubscriptBox["C", "j"], "|", " ", "j"}], " ", "=", "0"}], ",", " ", "...",
      ",", " ", "N"}], "}"}], TraditionalForm]], "InlineMath"],
 " that satisfy ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["C", "j"], "(", 
     SubscriptBox["x", "i"], ")"}], "=", 
    SubscriptBox["\[Delta]", "ij"]}], TraditionalForm]], "InlineMath"],
 ". "
}], "Text",
 Deletable->True,
 CellID->225188045],

Cell[TextData[{
 "Using the cardinal functions one can construct the matrix ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    SubscriptBox["D", "ij"], 
    RowBox[{"(", "1", ")"}]], TraditionalForm]], "InlineMath"],
 " that represents the first derivative as ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox[
     SubscriptBox["D", "ij"], 
     RowBox[{"(", "1", ")"}]], "=", 
    RowBox[{
     RowBox[{
      SubscriptBox["C", "i"], "'"}], 
     RowBox[{"(", 
      SubscriptBox["x", "j"], ")"}]}]}], TraditionalForm]], "InlineMath"],
 ", and similarly for higher derivatives."
}], "Text",
 Deletable->True,
 CellID->667655692],

Cell["\<\
Solving the resulting linear equation will give a function which solves the \
original equation exactly at the collocation points. The hope is that as the \
number of gridpoints is increased, it will also solve the equation at other \
points.\
\>", "Text",
 CellID->2034219487],

Cell["\<\
For this to work, the choice of collocation points is crucial. The choice \
which tends to work best and is therefore most often used is the Chebyshev \
grid:\
\>", "Text",
 CellID->1991738820],

Cell[TextData[{
 " ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["x", "i"], "=", 
    RowBox[{"cos", "(", 
     RowBox[{
      FractionBox["i", "N"], "\[Pi]"}], ")"}]}], TraditionalForm]], 
  "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"i", "=", " ", "0"}], ",", "...", ",", " ", "N"}], 
   TraditionalForm]], "InlineMath"]
}], "Text",
 Deletable->True,
 CellID->1421600843],

Cell[TextData[{
 "For this grid it has been proven that convergence is exponential in ",
 Cell[BoxData[
  FormBox["N", TraditionalForm]], "InlineMath"],
 ". As given these points lie in the interval [-1,1], but this can be \
rescaled without problems. (In fact in the code it defaults to the interval \
[0,1], but the horizon can be changed using the option Horizon.)"
}], "Text",
 Deletable->True,
 CellID->616759975],

Cell[TextData[{
 "For this grid, the cardinal functions are linear combinations of Chebyshev \
polynomials ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["T", "n"], "(", "x", ")"}], TraditionalForm]], 
  "InlineMath"],
 ":"
}], "Text",
 Deletable->True,
 CellID->988872173],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["C", "j"], "(", "x", ")"}], "=", 
    RowBox[{
     FractionBox["2", 
      RowBox[{"N", " ", 
       SubscriptBox["p", "j"]}]], 
     RowBox[{
      UnderoverscriptBox["\[Sum]", 
       RowBox[{"m", "=", "0"}], "N"], 
      RowBox[{
       FractionBox["1", 
        SubscriptBox["p", "m"]], 
       RowBox[{
        SubscriptBox["T", "m"], "(", 
        SubscriptBox["x", "j"], ")"}], 
       RowBox[{
        SubscriptBox["T", "m"], "(", "x", ")"}]}]}]}]}], TraditionalForm]], 
  "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["p", "0"], "=", 
    RowBox[{
     SubscriptBox["p", "N"], "=", "0"}]}], TraditionalForm]], "InlineMath"],
 ", ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["p", "j"], "=", "1"}], TraditionalForm]], "InlineMath"]
}], "Text",
 Deletable->True,
 CellID->1630184905],

Cell[CellGroupData[{

Cell[TextData[{
 "Below we show what these cardinal functions look like for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"N", "=", "6"}], TraditionalForm]], "InlineMath"],
 ", dashed lines indicate the gridpoints, where all but one of the functions \
vanish, and the remaining one equals 1."
}], "Text",
 Deletable->True,
 CellID->1087114798],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"n", "=", "6"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"x", "=", 
   RowBox[{
    RowBox[{"Cos", "[", 
     RowBox[{
      RowBox[{"\[Pi]", "/", "n"}], " ", 
      RowBox[{"Range", "[", 
       RowBox[{"0", ",", "n"}], "]"}]}], "]"}], "//", "N"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"p", "[", "i_", "]"}], ":=", 
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"i", "\[Equal]", "0"}], "||", 
     RowBox[{"i", "\[Equal]", "n"}]}], ",", "2", ",", "1"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"c", "[", 
   RowBox[{"j_Integer", ",", "y_"}], "]"}], ":=", 
  RowBox[{
   FractionBox["2", 
    RowBox[{"n", "  ", 
     RowBox[{"p", "[", "j", "]"}]}]], 
   RowBox[{"(", 
    RowBox[{
     UnderoverscriptBox["\[Sum]", 
      RowBox[{"m", "=", "0"}], "n"], 
     RowBox[{
      FractionBox["1", 
       RowBox[{"p", "[", "m", "]"}]], 
      RowBox[{"ChebyshevT", "[", 
       RowBox[{"m", ",", " ", 
        RowBox[{"x", "\[LeftDoubleBracket]", 
         RowBox[{"j", "+", "1"}], "\[RightDoubleBracket]"}]}], "]"}], " ", 
      RowBox[{"ChebyshevT", "[", 
       RowBox[{"m", ",", " ", "y"}], "]"}]}]}], 
    ")"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"c", "[", 
       RowBox[{"i", ",", "y"}], "]"}], ",", 
      RowBox[{"{", 
       RowBox[{"i", ",", "0", ",", "n"}], "}"}]}], "]"}], "//", "Evaluate"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{"y", ",", 
     RowBox[{"-", "1"}], ",", "1"}], "}"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "500"}], ",", 
   RowBox[{"Epilog", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Black", ",", "Dashed", ",", 
      RowBox[{
       RowBox[{
        RowBox[{"Line", "[", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{"#", ",", 
             RowBox[{"-", "2"}]}], "}"}], ",", 
           RowBox[{"{", 
            RowBox[{"#", ",", "2"}], "}"}]}], "}"}], "]"}], "&"}], "/@", 
       "x"}]}], "}"}]}]}], "]"}]}], "Input",
 CellLabel->"In[217]:=",
 CellID->1104739231],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
H0x4S2xHCOReav1Q8lGcfYGero9boTC2I2Sn/Dyn2EyuHKqSll9zaUQAG3yx
vSw0cWvh1KGhhcOBjtEJUmwvfn1hos/x3HVz21GWNLKH2tjey+usuV+OvHiT
KUnMpky/50Wx3WSy7D3JnJh5P7NxtSyiSOah1CNN8KLYnt9bcZ3/vlDC5irh
az+ziZqJDqxQG9ubRPHIf8gLwUN2L4+yRAB8sb3+ZW4XxzEztLFh/MolR8E2
DH07Qi37sUzsuEKBBPZODmYXTar07VY008vMvfHIE1zAZQ6Fpr7017fbE5sh
iWW/y6+Z1sztST2q95KYQ0//dqesva3HZHPm8a5VVKr07Vbmpns5KQHIC9a+
W8uKBaq6gUPfjoAEdiS8O7xZWNhnX03PCgx9O0JLSVJLSbLDm2WhBXIRZVEa
N1k/pvaIR8issuTtTM4sIUN364pqrCT9NV1dH7fiFToZG5FiRnxTxsbb0kKs
mH3qRa9RF1ML8kNmxfjL26VZhx5R3RfMjNX3lF5xLMKVktxiX00PKsigHRm6
O7zJCWAtDtPUANAN4sja1BsFz5JEVHfEmzj/oKi6cdhgNiKDdsWy49IPbfGu
2D6xNO3HDDKaTaODwoKM01R3x5sQ8p+Wxt0Xv8qjuiOYUclnOT85htanEcLC
gj5yOjDRKymJuejwZtIX0cY1VA6ltGJCIv9t7xt8VUF/t1Q1DJ9/WFQ6UHu5
1JuGRvT3HHDgYskD/qCohHtpsJdPdV+8ifGRBsb9b8YbSYqHADHpjYnbLzvM
IVy5XNogBh+gturbERYVI5yHAfbvaJWrzL0ujeXdQKG+3criwkrMf3+1oqay
TpC36NttGE1mv2DmL8ybDeO0rlPmgLfo223UyVuO5YSmRu82mdDWRqEDFOrb
raxpluMff7ainqewDzj07VZY/rdX5z+oH3EkkDs46DglAknfblhbSbn8QfrS
TJeCF4ynDh21OhmEUuHAqwOJo7XQvRrc4EU6GRv3Ekp33bpvWae1gYwDXqST
sYJ8vXuTf8kucVmygZ5Qq5PZ2DSk7WKFHxroIbsehz34dDIIvJOvZjo/MOff
58dUq3UOm0HSQG5spi/tMKy99z8f5PdV3XXMpEMD5bH9+gt+9hO+MIJK5bA3
xvYw3usdxxLRFOygD94X2y3mS2++uVvuNY4oViiP7aJn2VXJL/n5NyjsA+7Y
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
N9M+hfXJHXTEtpmZXk5O4nofRMfFVoPRbv+JnxdDTAHKM+vVFZKPN5pGE9iU
YU/Ipn2wVywuA23n9oZkchfW3hDBtS3jR67jol9VTs990tAEijU1GJZgw+eR
2hzdNbkoGYUmZHrEjNsv+1P7ep3Po2eGifoecnCq6/r2wsuouW63OUTgmCPv
7gMj0/DWTN/ePzJ/9q5jEzIjggpc1tHa8vjVFTfkh3UO86I+CuYSo+iW3I4F
JuXimlkmpp307eXDdaHMeOu1SYQCSuIlWlIg9caT0qD0vbgxZE2+0F6WD2MT
OzdifqLfzrOmWwYw3tFjVV3bP6JU9EWlWFj930nfDqOzwFLyWaB0zKEci1sS
LGJwQBIdVXHYG4NEtC8tuT8B+sfG6vwK/SaZ6F8YHki7dIHc32+jQwUz4ipG
LKzEmenbwdXSb1nawc8yxZRIHpJQdj6M1DvkNhp0FNKltbjX1Udv4CoaHMu0
Xph7Qip5f4qpvl2p3Nj3PWLDfSJMcc84/kqi6/p24lmsbMINa5FGMNKDp/ot
byFMw/KQFHuDZstl03RCEBV7WTL3+Xc56TXPXVR0uldXM9bmFA0jmDJRZ9sV
ukC+1zK9o15oQ61sICbjoo/W52WhvaJ6CDWffXnOFWxqN/q5xfiY46Up1yf7
ePb8FtmYCO8b24kyp3EwusC/3r4cb1EnA8MxJuOQdsN8zqQtj1fgm788Y5fp
2NI8dSuIfsy3gELpU6n2cKAMuO09xE60VzYtqeaoDzblZYNy5+1gvMmOAFqk
zTphFLYZQwa8LVRxp/dVDInV616BonPoG5m/HEW9nVA2t2DvPEBLXWYb13Lo
3fa2maAb7pGRGyAbnyOdc0NMTvBJlW6S7hjQzkS00i3MIUO7Al8Mxm6bNYDx
39mERqcf7O8q3lWEBr5DOeUuFeNv3YAHg9Bmgmy+SGAlG8LMYBv+oW8NOp51
P5vs91w28dnsHPcCnuxYZxV4IsQnZ4damDZHSaVMQQtI6UCxzSbD80ntyQhz
k9Iit9ezEzt4KNMjb3RvGpKriwMINuPjabU6NnvY7xzpoh+ZUznqlu3kuwFL
QhnVH8+4U5wUV3X0CA6oaaeSp4uCoaFar63mCb6PbC2o78SM7Nw9UngSC2xm
J6/4IwCIBU/nH7yCJpb36uzYobYgHiQizlr8CJHfnpvT6sZrUy6u4I7EuF5P
3jdpm27d0gW8VPoqaPvx7sE5v3DbGfQWJaMU9EVWcfiqYpem7RjsoWNeew/2
MHYqoFaoEfsyrEcgCWbEllta3dNq1I2kFPzDY3waDevzsCWL8ZGykX5ezA51
lL2+jYs60lNNsL7YuqnRlt3OYt/PN53mkq+se15GwX/Tktu5XbkmQ6V5qtbf
W/g67WZ1LIt+k7xhNYECGOdEYs+xHwtCghltrS5J0XYndFpde34TxjunGtV2
8jgeDHi1pSlo5lDNHeYTK/XAQ0Huvw9D8E4FKOw+rwA0s+6jSNpcx+z8SlAc
PSC62J5FQHzOscUFCxFUoJE0N7khNY8R0OXzvgl1sZKJkfG873dMkqLWaipH
G1425N+kPwosiQ4pe5zMza0Y4VrX7G3lYPoBfPC3H+rbX6IasCUWpk+NePNG
x28pgM7oSt6ET4OlRSEZ5VdZEq1RW74VrLDSkYp3U0nb9e1988PH8Te026IB
yERjxPizHERMzTMc/nicW/Yd72ZIZ0aqUDHocK+OcpRmfcdG9Uan48RgeGm0
jfX3Uytgt5sJrrbHHGjl5pjuOtGqtaywElZ4qXbnpTSFQo1EtB/2xsQ85AwN
uS2SzO6EZEBMOIWqTqiMj606f5Y4Pm7Ob9BEfQsCh6UfbLc01bcLub07pb2W
K1R3E8uvRBcDf36Mi3cj6NUDh69h0cWd1g34lvosaFGG10Z9uz6Cyj6klakt
gFy1wh6uT27IC6LHBNAiYbh8Xp9TPda0vnOyhrwfwsZHXJK4/ObXv872tjBX
Bl+KaCd5oS8FlcaQ+8rbZnr654dbZ7qp/ezoyhc/IM7Bf4Fkx6+mJvobVs2M
Ohm4aYeuYaw85TXFAr3oZikhaM1NcW4/Nja1Gl51Gj7bV2wpE9lo5WD5vRLD
6+06mbvlCdtTDwsaSzAR3vxyctGZhNoEgkb5UdLr7EIoFudqcQno8IPtTIRx
Fd4M4EHXJxJp114ZrfcZ8bJ3AMZU8GCmk9nQrKPTD67I3y2ValbVpUGk6jj2
TnF6gdXBuT7khX72tG5u7pPKsT4jwLusjmMRz2LomA747SU08xkYUi/TLEKp
qU6mIhI5xLSwg7J3SOwbVJBHatsNs+v2QLqkBAP+RmyplRl46fywMcueUSfT
1yu+7E/d6RQgyaiK5O/yf3rAeVncz26Z5sMRoFNiT1koM94b45/XVmSR4bO9
w3/9q1+58ot+/atfI8+YhzwFq/Io7mpcddr8quXoECqtmiao8MFegYdusUwT
NY3P0QcNM3J7Z7/IP3LHOzAxXId57d3VjLUoVNvNmJ5owWb49G1TAoPLj9yX
YZjRNeP2Iek43N4Nk6lmrUZVg31MeXaxHVeC8Y4erXRDjuY9h5VFUR3+Kdjw
7cz8nRge5RmB3H9/Q/nOeo9KqaBUvJcvmnF7bweRQ3/3Fh4E1b+wMaXW4vKN
gdW9D6ITn9XNiXa7kfkxMMweQHtlNyJbLvqR4SaYxkmAzg49fUr+Xk1k5Ha1
Yh0ex/aNZvBQDl5Bt/bsvbksIrMHDIaqph2tVkLe6QWxntCM3I4v4Ge8thCt
GogR+NwXHwiUvpN9DmWAZi3GgEWdif3VX7jE7XB6QQDK9AhntBFGE54dKeDB
X8N2FUNhSh/L7CNhb0N55t23JtyelM/FW4ohA8ZVPTsRRkPDHduLWF2Zp2Au
NddmmAWL48QwBSV6k96M2yMrksgmSVFXFmbJCX5VyNjysGzq5ReuR1va09hi
+Gdgw7cx8iwyPFjvVP9ktUI/RS8YlRy5jjP60abcrtNt4nOOGRqVanmdcrGg
LZdn4etWVPl5bcDqzxPrfz62ukUsz8ip/vjysJKYcFbAlWKJ5P0UGXRzoCDj
WyO3D9KbOTEY00o0G5tPc+r8wsnz0s+Z58sVjAilp+8UJWTXrqssrMi0NeRB
T39rwu337pY3NgjNioHpC8QI902zaTsvNlfY+nXOid4PCZAQmPSrP/8Lp38F
4B/+82+Lw4qMb/kiwda3OLDwMbMsvkC+B37Hqsn2fOiViNB9uk2tQd8OfplX
AFq8zdmRLYwV5Z+uYz0Fhnfu+pXKjfExmSG0NQbdmZbKi4utDg9j3QwqveBH
vnCedOpE4ZlThNMnCSeO4c+fJfpfokC7vRvKjI2pSkqsz8ttoxX3c7nCAYFk
cdH5oLXaDTWHHkMruKZcez9jKWwYp9/Urx2b6tsnZNOHMJfVfxoFZoc6sJGH
eYU5uKOPmjPpup2DHP6soJCJ6wsTtxg+dzvDN6WXwCAIRiO8vvP0ffQwU337
QHcpk3Tn7dYcO/lCQWu2edQdsNVzc1qB1aEZiMU/a1Y3AppfcwYXdzQPm1R7
9AjOuDNLqVk/iL44u/Juzcioby8NSjcNVyhbVl59SIt+VelKPjXlyqJkUjDR
Xd9fTwUPrp7wnIOMKUsPKXkZCI4tMf4sIfYU/qEvIfYkPuY4KeF8cVIAfMTK
DqtCxfCoaZ1s9CCPPtXfJBONORfX6O2WyPZZbt2Z0KLtC6wy6URBti94fwZ9
++amznM/0nRXMtDgfXbiZep9ezLPGjG6KATiZQ7VGo/QwjJ++5/M8zo5BAGt
h5v8LhNl01SnJ+qCxW2Suk2dlZj/QN2veMjTRcHTy++36VET/cXj7yaiwTsL
eGC+eQR6Hzrda3TA3iAMcD9FohVu/QQW0wkEfjWg+JAX+sA+pN85EnC1ISUN
hdJXWTECVA/NcmRYKhQuzUwvw1ngaM/OrkxOykdHF3t7xa0t0zXVY8DqSET7
q5TGqMgK4PyjPtgfvsuH2uBtVmYzmzU8PCS1KB7YCR08JNiKsj8tPOm0Oox3
zuqHSwwxVa/w3e+ksD01RGyUT21qLtbn4UzrLhUSfEboGZ7wHB3u1UrPUa19
cBt5abTiKy81q+u9w+KTIQTDpK5xFXVzc6Mg60fJnECj1DBDabUJH7QxsNWB
1aHxJCdx5+f3qnn58TDTOok9nFsaxz7shaaQ31E3qoOcsGWvGrE6v4TxjjZa
I2NTMvChMLRO+78ILKKFqcHhlvKW0qyK3Ajg7fw73+GijtCSAyryIhtILztZ
KAGXNt5VMz3QMj/RJ50Zkc9PrUhF4NzB/+WFmaU5oXR6aG6UD2Q+0lbRV0cG
dw+sgvKse+ALI+/ugz8g/xrsk64KrLCHCz6y/ZdX0TACFun2FEJklN+86N1t
ATIJuPx+qhn4HGgwpRFpJbkJEKnF6BYjUuGPBdeAhA1vG15QBDQLnqb96MS0
tuboa5iWi8CJMPoFawtyqLk6Fkf86Sly3/2cr2/nfxcG/4GFSgJTwS8eYraY
7UQrH67zwV7p+VMNLSWZMIYaXoObRmS+D7YAVnoVI4aCubS8ZGMf+szMMqdy
ND2NB3Y40PjJ43jwgLKzWoB4BQLJ8rKbVxuByScmZDB84LBd8U9qgPANbB//
uIZM6u3vn7cZr3V8qAbz2lv0px1JjSm1cIeNn8LYBzdZuaF6o9PxKKmFMaeo
gU+Zd7Jshi7/OWN1aZ5LSEKFeZoxfGMKlRaQollTBcczDKa7kdv7u4rLKfc0
q2qqP74i6r1U1cDqXp4oYHXTOYdfYIb1JSXzTjHpEt7/ZGEhng/WKZijnqiL
cyay5C4sBx6B4XVb78yha5jqZgv6QFNsajfmJ/qBgcHGBiZHhP4A/6sxcfzK
AjDUZXMT27eYuQjV2jIMCsOtLKAjVk44GPzA9qUp18HCh7EABgjrp0+J5H7h
5Jg0jtJkfobfgjOKr8CezMl+18F7xUOHsVdMbW+AQrwyyOire1pZEkjEHcnN
+fpV/nfped+kwV/RGXR1LKu/uHvtT/NXgwtjYF0bljbacpmdaJfkgk1p9T1F
nVqd9hIljDGoN+DBgAS2QfwQXhuPH2a1ycZExqUrsJyViyvinvE+Crc6rgDl
GUk8+7Qtr3xJ+G7zcvtMzyHM5bYZPY3PDLSWptx4u6UROngFbQzCJpWMFOWf
aeC82LQ0EwWF+3rF0Jwi7rPBsgIyj3nIKSL0dHWJPks4JriekREpDCUpLxsC
rhQD1QdepYFVD67B2ppl1ZNoqgvofXRAH39GMiCGJ2j8CCwfVCdlc0NTiYgm
xl5EH47sLtzbu00/GVZlFhgerHdofvzeaYPpbuD2Ta0Gl3lkblJQHEAwBq82
ZfVfbHV7oN/BSujAHMp5dKEoK7NlfX0jr60oyWRjJuHkk4UhvW3G5g4DsfeN
WI5goFYqhL0NTdQ0Q4pGcOe5RcmDTWUy0ZhDIfjcBc362uxwB5+D5yBjcNFH
sZGHwUfoqSbAEGDxetQabTKCeyK4cHTy3eZ9xbIYk3HIkM4M2KCzQ+8LgL0N
1NfxJ8mcfFIGNjPxLBb4HAi8j8IX94qUi2vGzr6h1MjGpcOsgZrHbLRXNiOY
Cu4SHAcSvkC+t7Gp7SmqbUpzKYERdIfBsr5UHiqUGa9PYRmQQjr3bKSiw86J
X3i4LVkMcM1oV18Nl7dtbmgFklEwTWEA0mrU8CgnJ8bqWseC4t6lEezrpKDT
vcC4Na1Ep3szIJDgC/h3Q5kH9iEu+pFfpzXV1024K9C9GwGGPZ8vwmI6bwcz
4FLBHQOeb22ZNpu6MUzKdbfqlULEnzBwk8Vi8fyq1At9SSafp724hr97ofD0
Y+nQ3hMSfF4Aw9cTnpsyfM0TfPm93JAnDHrNoCF+O7Sxcko4M7TYMBXzC6u7
AumwhHAanX4Kc+0SZUayCA14ZlkM91nYKjAEfsSWdAHvmW02h74/1d/UXPwa
mBwRuo+ZcaeThZob6war5jP9jh0BLWq0o6qRlEJ9fjkv+Juy17e7KrDgXLz5
ULoJLon3VQyN804gSicEjQ3WjYwI9/+gDyMDNi1Y7EML45sbm0NMQfEVAu5o
Xmt248KgXSGwgGxHKgZJ53Fg2wPhh7GepvHQcJNJ4emu/DSogUVgwYVxMXqK
HqQ7kHrevJ4w/bwx+BHMvuqvc07AQMZIu/Uf/8O/DwjLY9YNqVUKdvF9Ksbf
qDeempJTyH33w1kHD6Au+JFTX/GgErcY59bz77irHnimPT1i4PngW8DzyJBg
RiG+Wyh8F7B0TbFARvnVlsfz8e1Qz+9+97uE2sy82jz8gxPIi2frk4halcPt
/NP8rt1fjynDryuWgduxkdgfgwqgnujoSMxrn/JIEiu8dFm+7hyr7/X74956
tGotN7k650DW1aOYjLrCR1WvoJ7XVx71EOtQxZ0X7pONiY+XxEIwgMvSQxB3
vi9NuQ4kKREKrBjnu/D+wJAELgb56QXUvQPsnPt9dRT5/LsNpyLJin8kNSql
Yk2pGeyh52dc+5u/+T/BHO0RDwLd1QqaOjGt2MO5+kqahc4544bgdbx87iH0
Zajnf/nX/5OLP+dK/O34uIf0oNdKqfPKXsPtlU/O1z0loDwjMXm5B5B+JcRn
f/vXf/UvvgnCiZ6CrB+batIXFxWcytHEZ3XHfAtOHsc/T6yvrhozTpvvwmdt
Z0mVStvcNPXyRcOpE4Unjul3cIMxv6pYKcEHVlOeQz1f/eNXp7J+Qtz2RJy5
OMmzNxai09fzc6jHwPDocC8eJY0amHjlht7UuXrZlxAcTwkgZKXxDnmhk57X
O2Grfxn3x731TPLGc/dlhB3I8kboaSfy/zmfiuQGxZUqFGtTguYGYjL+oS/8
cYv0edLtjNi/G37XTvWo1pbBnq/DPyt44IuLPlqLi4e3q3JZKoYHfkq3YDI+
8l/+6n/9d4lY6o/5VylJZLRXdt3TSvn0kosXo1xcK71Owj8v1HP7v3KV24/f
PV+fTHzj2vYx01+0Ilqsf05MPBFy4tWJ//3X//P5G7GIV16ZqciLfmQw0aMi
KkpogtlZC+PIbn7W9mNiQoYv4N8ILPHcj3wYzURnXoJ6/ubf/nXmrW8pt6Nc
WTb9Mu6Pe+tZky/wKKnIewcyr5yFerz/+++yDr72OYAEN9Dp1dLd8Lt2YT1K
2RruAv7p/mSox/fI3diHiezcKENK9O4qvNG+/WTX88nqWZZM99dTK3IjwFUE
k56a8+zC1Sc3Qu7+xa9/dSskDOGVWf+8SiFecdfFgM3f8LIG6vmzf/WvbV7w
L/gFv+AX/IIvCTbHiJ9uZt+PuHboYM7zxPr2thlXsj2CKV5dNZaexgu4TN3/
AyLq7sOEuJMR185fjzuMDHgi4rsttdMegmpljXY39nXwNxmHw9Oib3h55t8K
olPIfb8I8NwIgUAScZ99zSsbGvwdvxvIuwfZOfclkzYi0/4C+7G6JOmtJZW+
CkLc3ZcUejnY73biwXhKMFW9izMJfjyIumYKzyATfOPCbly5c+06MuYCInQf
LTmgiZo22lHlkITeDLpN7cxQex3+KSrs4OOgn+IiIly5Tjyj+25cKp0YVkRo
D7pe+v0f8+6GMpGI9tra8YkJ2U7BzZaXVWNjiw1cIZnU+yKZey2A5rkfefJE
YcwDTiG+u6WpvQR/g4r1T8xmI7IRyOd+J1CByFMxldGovZg2yGlM8vrRp4Ny
Q76/kO3XmF5DuBPPJN9raBh5llDrfRAdcKW4EM+3ODf1C+wBuK4tLdN3QspO
HMMTXzfm79Ov8T1OLr/h+6ypKA//0LcsPWRmwJ1RtX9uAJric/DFSQHo8IO1
BQmjfG5oAv36DVRTbtmR3MCQ/UmoQzlTzcLPfZmfDoq5lYooBv4EIjg+8mJC
Cgn3ikpKCowpuRVH627ldVcVchAP8DHHgepLU25wCUm9NcTJ3sbF2THVquWk
FRqVUjY3MdFd38bIY2aE5t/5rjTlemdl4Z04wr3HGfwtoZ3TGJ1cPHWbUMtK
qGcnbmjWFYplNluAyG8Pu1fud44EjP3tH3KPHMb+eAR36kQh/D/khf7jN7le
nqhLF8j3QplgpdNogq4ukSHBrlarbm/IR6d79XcVq9Raz8sokUgCvzStPv9W
aWwbioXyjGzLZWrVtmMs7GmolteqHmFxp8Nybn5963VA2XCdfHoJezinsiSm
jHRbu6Ha3NR1dsymJFcfOoT1v0jBYbtmps2zCP2CnaBWa+mlA+fOEuHWVVSM
LIwsoL2ykFH6+XbZsvLARUTGoRjp6MxIWwUx/iz8DTaVuX1TzBcMuWS6k42h
PLuIjTzcQHoJlqRSviBd0wY/YcSmc5AHo8BCqxptPFtw1+8AAuWTXfmYpVZ8
4TFLtWptWy4P453dgWkJLonLaMId2IeUiOdQqQfUqjVqRb93ACaf3K7e2ryv
VirmRvkCLg0seVZOOCn+HHBgbvA3MERiIrzxD4/BHyrMM/fWH5D39hc9PlOR
G9FKz5nq52nWV4E2z4QWxb2uJuSdeZfCT6VYUjiwEUC7MIgK+dYntWVmZsYn
ECOaX65jP6NkH77x+6t4cqJPCNm44Af9SC5fF4sVc3OKhYU1hUJtMcQxGFEj
goqCbN9qRqwhpgqjZvB+MlskEtFeXhf28cJYT5/X56xJl6vjCvDH4saqd8wl
t9cxXsPHHn5QmZiac/Ofg/d/9X+HevkfCqsRikuvkya4ozXMJ3TC1fzThjmz
s93KN938uVcpjUd9sBf8yGhUx+TkJ00QvLcgkayC4XHYGxNxnw0WxdutHKC4
o3mMl8nNdZkeW/p2BKU97AEFd/SRwUmcHeqA/oW57w2m0erSZ0u5u/uxNCfs
KEeREs7joo40klOAnQz6il5UyKVk7Nf//ZuTj8pHOJ1lIZmG+O0+1/+boRHf
DKDgjuQKG77YXAOjnCH9FqQ4tlK6Fl/7OrIiqbVlOvAqFcitsiRa0K0P5S1d
Usa+rvYNKqhotJyGFRgSqHtNvqCQiaEdriuWDBkujFgYrL76L//lv/6YlUdq
W5GLkKmeQM6KXpRPQCo+NSAEb28oRa1qqRMf8G1iy1/+5V9GvyjZCpSqevYH
j28Cv5sYrmMFeASwJu2s6s0b3egAh4Q6X1p4XWKSfutKdHFL9/Tf//3fFyOS
YPRXbqj8yHeLtnIVzfcLqf4vSoPSpcNf1OYdGLkqo1HEn572V7KATOqf/97j
u8Mt03z2qyMef/V3w+UC9v1SeMSsrB//x+EDs4sfxHuE4729YvCDfI/izp8l
opAdo6PuTGK71wFuzsPoSnAYU1MajRNZquV1wml0G7YGk3FIrVJ4bMWBVKo2
fAKxbBSHcDoeHChDyeWFGR4lFQwnds796YGWX/YCGyGbm2gvyyc+OVvwwJdH
TROP95reHNUYysPjlt9DWuLLBA+PEOTtrNGqTn0cyGr0kX3Xfsi60t41C0Nt
I62P+BMGmvfqrk/D4RAWhuZLAolUf/x8nz5SFrar2J8artKqoZ8+f077u7/7
uxlhazHuirG8YFQS+Kjk7F1iZeOoo22soqrpn377t2deNLzVB82glpIe/ObX
fwG+aKk+nYUoBF6I7LXeVZ2p38bpuZ3O6Qx9yoRxO/Grbym9fSTkuYyLf+tx
j2CzhrVVaVczFp9zjFZwbUbYZvqRYExy6ra+BuD25noOIfYkvJasLh7BBTRO
6nPlwA8fZDSDfVv3rGhdvucXFsHC6aNw0Qej2vNZomE+ELtohP/szn/7H/H3
4VMu/o6Hx98sqLXog1lr0tVBcoTB4MlqmrNQ1Zs3/f3zmRnNBql8WioPDNQv
JlOno1hcVBIKu+FWgFNTWiJYN0mEp9NuQr8DT5ldfL+nTd/YPP4U45fGEdxO
KGvNZpReTzPNSKjVqAabGNRE/8KYE91VheuKn6mLBM0VzPKm4nTomHArmmkZ
EqHAIhfN1Sb85v+LTUE1Al/83uP/erAvalOjBW6vL0r4dqsN/yEmtaNDT+99
veJOTCvaK7sb37FT9pM9hHW5su5pJdYnd7Cs33Bn6idaffGBMqW+zZw8judw
Wgwxfgl5pyRzH8QTa+2ZufWEcewWHlfKtydFLLBlcDzjfBiJHHYgrkW/+bGM
GNLVyvjNr//Ntx5xW5mKFNlfeRg+MsPSgsgUS1tzY4rORAO3z8yK911ErEoa
vvL4tlPxVqfTNiNP/9b7D1TsZX5LwbyoT6N+f3nKtUWg8Q4esgQfiHj1A7cy
+d2k0IeIy6gmlutDKxjitxc+OiET6V22wYUxb4z/iFRoKKZZUzVnlKK9ojox
lVr1rtuPbCe23JBkRvCr0fae3rb61KDvO+qZg+O9/+Dhcb9WH92xlZP9b/7s
38OD4b2qbUcYdv5qY2EA9fh3PavW5O7j4zIMuvOKP9X7IDr+SQ23fkKl+gJz
p26HRrNZWzMedq8cDPXnifUCgYXMuVWPyjkPmaKprsLcE4bYREZu127qTt8m
tPZMgxtVHVew/VzJ5EAd/ln+7e8qciOEvQ2fJbDJpwcMbcIe7laKKy9K4qWO
cqR0xvIEggGbOp3Pt//Hvz2F2nq3cPNv/jkzsfitSfz2rpb8P/fwQAwstrZM
A70PDS2siJaZoTTSeZy410YYrl0LrVrLL2jHeOc0Z3I1fxKTjC4KjcQFvfL0
SYIxfntvB6m6LG57PSNCaTKiwSsAHfCAlk9ub++bWZS/39IF3mXvsBjI/2IE
5WQIAawRaLSdiT5A4BqNEvlq37x49td//mceHqkGgmiJ+9YSt6tYiREhEe8Q
EhBSOqYvbuD2f/qnf1paWop4webwWuO++rZ66+ze1K88Ypuh1/Cq0yiYS8jU
/bnJ36BSD+QkfY3NOMwgBrfUZc5OdsAoYPHmzC+uwi9SrutviyF+O1gInSyU
4VPT4c8AxZyM8xCNO/poiNnq4haqT4wV0WJ1HK7AN1a/fKAaS7h88dA//+fr
l8/Dff6XYyf8fvptBFc/6vLIYR4e/7C0lV8edzTvTxE+VcH/8T8/yvJXq2zv
ZpJIVoup/XdCyg7sQ9wPZ5Uzh+TyL3P1qqdH/Cql8ZAX+nYwo6JiZKexrAPZ
XBxAgG5IQp0fG3wXpNrDJH57XevEhfvkDZW6OCClA8W2WMmGen2wqYyeGgRc
10hKMWSB/PKgWluGn8nKCUeE7mOkB/fVUVZlttcdVpUaMPnCg/2+itDHW9Ot
tv3W43/jCPQnGuO3A0ID/3Ffdha84DVO+hzCGCYSx2tGsIf1E9RrC3vMJR+t
GsL7IioiGSuz7wlqaX35GP46EJfhLZhbr9ObDPHb4S2Yvuj0g8odUtRptbqO
vtl0XFPwE8aR67ivz+Tsu4T8/gLi23N5lyIoaVheZ7/I6DEZuH10gMMujpDL
5f/4X/6T0W5P3cFutwhFS+K3ie9iBbOr2m/FlWxNs+tHW27EVxGsD4bdTa0G
RhM7Z5BeYXiZhR+kUBSP9ZCfXjC+RXdSAooj1B9mKZIIJksCU8l+z2fa9kAk
c9XyGi+Nhj4Y1YmuMESGWRILsZGHx/m1b7fck8PYK2MMf7ih+o/ghobo+Ue1
JMJdI/eWGvrFZMi3EdTqtGJcgKlnZB2rqxpO5WjMQw4YtIFXaShkR3/fvPUE
vnsC4NG/Tms65ltwwY+Mw3ZZDxQwWjmIP4ZYX1IO9TJLC68bj5tt6Lj6kMas
G1pfUuB9Y0c51uKKK2TiTjaGlHAe/9C3aWvO2cWf89kBngh0ujZGLvW5PyrM
k4N4MNpeaSXbuBnWlBr/KCp4329FpR4eIcAFo4zs/+DhrScFaMQLKpXC4P2/
LfT3+l3qReGSfuGsvm7iyGHsxIR+CRuGXXBRMd7ZrdmNmtU9IFKa7Zgi++Fo
AQRxzwcC9Y1N7TVaFMokaab/JYoxa4kBTTVpzR8Gt98J0FXBYlfvkAujMw4o
WcWihkHD3rrNkyHv5tuX4jy+Yi3Y510qBhN9PDzOJrZM6o3GXtQhj7++Klto
Cfk2AIXX62ScNgpXVlUH/FGm3sfbrTlkXNQR02jJMZyU2OrU7adP1PcUnnhM
v/la3Dux/dPdAK1aw8dXo72iGl5SjCsFywsz8AOh+7zd+rFXiiNYw3XwRFAB
Pol4+BcxuHVDyT4e/+9d5H69QCYiLiKC3KsfiBs4L0rwgRsax7I+gT3A54ty
slsvXSB7H0THPOCU0AR7S0ipVmvB2HueWH/0CO7c1vKxPRoh6HrgLy8JF8Hf
wbz2XjRJyG7G7UMTUrCU1lUbS0IxxjvanhYFA3RHOZKc4IeJ8OYSkib7eGDb
O/HTPhfkkul+bnElIhr4nJro30rPmRvrNkSjtR9APgEPaCnod5mqelEhAYko
v7/7rylbmQjG8D4e36ILA/SNODEuIpHcS+1n32LEGgpXV40d9cFOTb17jmvS
1fpEDjB8d2GH1oVkTB8V0y2TtGtFxLMYcDe2fwo0BWT1vvC0HH6gmZW7ujKP
SvO030KzCMUg66yHx+mEgqTEH6Aq4IpvUYNLnSifs4n4RAd0MtsR+bICjBzg
jKWFJVeeAZLSkZhbv/14A/EFvxJnfAtG+2XqfWxX8faScN+G2e2Ek09Kg9Jn
O6zNB35iAKt346sxhx5wHqKXZxaMxxWLcwUPfhxqZhrelg3WwEBvfPqKpSXT
gVKn1eGOZE/3T5ne5Hp2YikhSLtDwlybWFpaB2P+WULtiWN4aHhxj6qA58fH
ZLtQDQJ2y+CApBDPD73DPLAPeSekjETstT/9NHjK4OzPtOlFXNzK5MaqFNNP
t2/HfpZbl4nXL3DMtA5hDz9YEdkrPQI7pLeGqA9pGLqPkRbMryyQTg/twvsJ
l7Q4OypooHGQD8G6wMccry1IGGmrWFfY67+bQaXWBj4qScrnmh6U9AxkH4ox
yxakUigMsutNne4C+V71WJPhOJs9/OMRnOmmPPmkrCKCjjuS20vs2ljfRXtb
ppomigMIxLPYsarhN5acXyAooCnTGQY0qiMt1UI6pBrm427XthqBuQa3U9Bd
Uk6L/PC4GYXYi5mZGd3WFDe3XXjzMd2la9tqGN4BmGnxe+tRJBJtXfJb0Qif
knjJtPCiUn4Ed5UrtLxz8I1ON1LRQTz7rDggZbyG/3nn4VUrax1Itp7VYzCy
iQ/SIK7JF6BDgbFkeLuqUR7CXB6WfmAiajQasfj9WR2olvrnVaYFoIfWlicw
iMGub7GZm1OwWcNgDIMl7OWJuh3MyMtt49ZPSD5f6PK1NU1nxywG3Xk/jAWX
dOE8CXoHWOzrDnZztUJFOI0eoOvTmUnnhzAZhzTqD36UQd9uekS+su4VgJ7c
ii4+UNpEOB1vyLJqP8BuB+u9gfSSlHAejOHyzLudbAw05s9ozytkYmEPt42R
C0MP6t4B4uOf6gsTwbRYWXR1+VKt0QIJPM2pMxvFuEmkTtT7HEAGfbtpgV7x
kG9BoEr7rvWyyofBzDBrcrJxKechE2z4tjyeSv45vSGwr0Y5Q8DqZD/ceO3I
TkM2V9gGBCVVfjBKQrfq79cvOgCtAbkZjy9Jhej0g5taVwUhQAITI3rbGGgZ
yNmVqv7yL/9SKtWvAmg3dYeufUDLTqCI2fMglWN6xKCTebtFX9hIH7MkVkPS
cS/0pdFFoZU6hQ199Juv8b6xneiKT597br5PWPNYn2GKm0wytdUNAOsIelZf
Hdl4JJWHel6fY1astbX1d7/73fuz5ErUgUzVygdj8Zs3uuqyOCbpjuvNwwiF
Qt3SPIVEtN8NZfoexR08gLoZVPoqpZFeOsDnixalzuf+tgJDWlseb7IAx38c
V33+LHH/D4ig66XA5zDEOL0ErNNu0oPIhjxK8BXFuCvDfeVmZYw6GVNQ2H0h
CWWG103pJYxbGU4nHFetyoFUm2kZJS8DwZ4nPnmXD25K0Ay8+pGseuWyVDTc
CcZDIzkFPAh0+EGwz1k54R3lSPje7YnCnYZmYzM4nvEks8Zs+Uazug7t37Tr
GXUypnjAeZnSiDC+JRb1nPuJuP1xg+fVkFyN+P51bUKlROBAtmi3YH1J2YVt
wx3JY9yiCLljVh6ZQRgztPDBhqzxcdkx33eyK6NOxojK0miDFtdpKJbn9Bmd
tlRbi4uLv/nNb1ypzcjtgMzCFrM1UIegXNeA0T75YQYWI7cDmqhp7WX5ZmfV
jjfDiG8qm7GIxTERGA/Qxtj38yfqe5zunnYCWnIvsY58IQksvZ6iWovGnkal
BE/E9BdBewCjfXmb7sWM2wG1CRV8XJtZMZ1uk0N/yKKGWcw26Dqgo3V0zEKn
S3pefyuIftQHC6zrd44E5vTL5AY0qpNBHwRzuq9XPDEhM+xB3tgwv89arQ7s
cKl0bXJS3t83D+XLGIPgqEKdd26XgVXzw3f5MI7cC2W+Tm+qqBiB7uAWcX5t
fEVFJMPgOA/20Evwgds7pkVu39TpLkZQKhv10/Lg/UH7qXvqUgc0AB6WTDQ+
3MoGqmdmhhbGnMi//R0M9GDY1xOeg20/wKMLexvmJ/rl81Nry1LN+tp2peUm
+GlKBbh+8vlJ8XgvlB/k0TvZaLDDWdlh5AS/nFu/ByYvTbkBdfZUF80Mte8U
mcRFbGg3Q58xH6VXbW5zkLsLa8x0pBa5HZo9NP6xxfd7HsFhvOJPtRiTClyw
7sIO8MKIZzE9RZ1K2cfNsLap0YJ9XhHFAJuKm1S1OGZupJlhaX0ZSKlmvMns
eH5eW2bGu+xF27l9aVGIzTiscXDhzBSt3JzmukzDa/dy+4x4GchZ62xPRFI6
4rNqzQ6acrt0ehi6wPYuiewgXaVFaewgtA2lerCsBUwvxA/hNU/wQPIb6+5c
gl8RLfZRuPSg16gDEcAAc/wdR3bolNDjGknv53u1uk0/8t2KEe72wtu5fXF0
QS+G3LbFQ6fTVpREsYsjPo3ien19A7i3iTdVQtMHEUpKrI+KqAAb+8xpwo9H
cN4H0X/4Ogf+/vhNruHFN7/X/3l5ouBTMMhvBJaEh7GeJ9ZDL4YampumgPBt
pgt3Al3YVqp/oXYrH/H2JVQjLHL72629IT6B2NUtktGqNJRLyXxc1fZiLgKI
GigabGlBAw1G/FpcAvA8WPhg3mPueyPv7c+7/cecm1/nBX8Df/BC/3fr93o7
PPooMf4sNKeK3AhgdTi3v5462ceTicY+zcwPdPmwJFb0q8rtfR9GQ/zxOLPk
jxa5HVA+XHeJEmY6OrxI5gbfpFtpEqLOaTDg0Qez6DfJfWT+isidYoANpQYo
vTqODfWXhVCHmP32zPYDEQXQIlEd5O0fnTlFGBp6Ny5s53ZALSuhzSSlrEMA
iw6b4bO89O5Wu87tBn278e29xPKtFVWHIV1SegWg5xfNJ3UN+nbjW1LC+bmx
7u2nR1e+eFzjQHJApUwhoPHK7+Yg9oWXBKa25TKnWwaMG8wdgnxaMlzeVves
iHAqHnckpj6RONUksO4XAPGCWVWNjjVlfmxXcSgz3mL57u5uHx8fs4P0IPJY
1bDlyovDwb/bafvApwc46Ya/z/Lt4zUjBb75yj8lz92+hGqEqb7dDMkI7gtk
g+G1UrpS8OOj8VoL7fATANoM2Py7Z1kW+DwqpSLiBdtifG+4S9C/zA6a6tvN
cLvsMb671PgW2syjGE5kBNu67wbdbappou4ZB3ckj3AKVZ/IGWYNyKeXnLhL
qhXVdIuwLY9Xep2E3JcBlC6g9TjkF8RVpz3kvNx+fHhICtxufGvUt5tiVSFB
pXkq15yJFjLUyyyn3DO+1evb//EfnahnJ3QJRGfvEp24pXEZ1fmkdpvFuqvw
YJlsP67Wavyp4QX8Eke/d3NDO9M+DNxeFpKJ8oyAPssIzuQmk/gFVUPM1ime
QMQflQxMwZ+4d2K2Y3iirqef2tCWVw5uJuViUu43oUDp1XE4MNfNFkl3Atyc
akwcKyvM1LSeXp7zxvjP77B/wSKE3LGSQKLFj6BmeMpNNemOqte+PEgGxBjv
HNn4uxsrmRvAZR7ZabeXlYQFYLQfuY4bmnhndMnGRBjvaGgVbr/gvQUg9siX
FWHPWRs7GDPFASlCrgNqf+gC0BEmZNPvv0KruxfKTIivtZNVZBOL/dTuqkfl
hSeQiH0ZVH98zWN2aw4PKBqM8NmOqfm+OWgVEoFYxJ+BEWGYPdCFbWt4UcO4
RQFfGLk/E/i8Pb8JSm7uICO3gu3CGCNSXurnLW3W0N6Qb3GbqnXAzSEifhJN
f9wIioGPSqqaxmyXM0Frz8yJ4MKdBPmmWFuWosI8LapBpGsyY7QZp7E6vzTd
Mthf3NCSxQD2ZoXnlV5PowWkwB+00rLbWZXRKDDRO9EVIxXt8/3CDaXDUzqN
pJTSV0FazfsTwQm9UhxBE1Q6WhX+OGKnrdngoJVT7nJKH/yc6X11XoH1yZ3i
vRMdwT2B9j8+VLtTeevJaKqbx/zCycZpB/DOsD4PocG473r3GKDdfn0mJ+51
9U7EPt8nBMvHUYkafbAK7DStSbtVq7XXA0vS0yxIB61Do9TM988Be3egWrjJ
1RVRDOadYkPwLtrVIrDMWWGltQkVzZnc/uLumdZJFyOVWRTGGLCxsXnICy0W
2165BnLD5xwTTdkeBUwxNlhVgg906BQnwB8QAVHv9Li3Ayj9REgh0Lud5cte
3x7rrLb40eDCmBf60phs91pT+o0tTy9o1j9w8azMxlgHmCLsiB11p0BlTHIo
h/7w50nvG0oN6Tyul9hlPAIWUQXNWiYam4nGwpNY6OL3na6XWEc6n+jE+P4F
AIg99nW1UUFkEaywPEGJw4QMuFuegOmkmh5ZXdVcuqAPYe1EbZ8GFoUxRtTX
TYQEM+ysanqiBZ9z3H49s06nJeSedLvRbtS3mwJ8NFypvV/0KL0qJm3HlSmj
vt2I0Y4qZmboTuWrRhuP4a/LVbsxUmhfPYUQe8psVwg0hsPYKxbHeiPM9O1G
aNVasEvlUzueu6nV6K33nx+9v9G9Kb9LA1PNeES2MIZO97I+k7ld324G6dKa
91XM2NT7SrhJpPJ7uXsripHrMBD77YQyK762bHwO/BqL0xrb9e1mWFiTfZf/
k+DD9e6lpfXTJwnF1N0YtEemlAPtGLdfbce9UCaH88HPMdO3m6GG+Rj+7Px2
fkuB6Uy7AW7Ut5tiXroKXWDWDgenvH74TGiRaufdxKY6GQM2tRuYCG+FbMfJ
bRyfBj7durObND8SRtoqcNFHzYIsKTXrJwk36yZsCEe362SM6MS0glNp5dyf
J73zUuvKQqhGHREYNhTMpe2CdjPspJMxBbNuyD+SapyZ0Wk3y0IyeakW9kd/
qQBiB3vszlOm9UnU6rgCfoFlm20nnYwpoFOcItw068ViscL3KI5TubtSJyvU
q+dIdwq7d/Sg4bIPe2PM1D4WdTJGbGiURMRPw/0sm9++vDSNee29IjcfJtyr
gTQFjSOALqDZJm82K3P4GlY4Y81k3c7tgGZaRjMt08pZydzclEakdtew2VQ/
DxNxaEksNDseXfniZYO5Yn87rHC7ZlWtD+puNVwe0PvW5EzMz4TeBbSeojNo
0wBTHTwkqzjc5on2cDvgfjI7p+j9bmjN6nrR6QTnJh/2HOwkdoVYhj4YpVmz
bF/Zw+1vt3qxaSQWAyaFSz6HME283TLvqtZqAkuiM5qxVspkZ7VkZTabHbTO
7QD54iQqzXNqm0jeFJubG0X5p3s7LGgqPh63v3nzJi6j+uszOTutbrO4w/Cp
qXtrERa5fWVRBKa7lfkoaIER7OcxVa92g1RsbqwbiH1hylwaSu1nX6KE2SPL
t8Lt+k9zGk0nHyzi50PvM22T2MO5pjpnydwANsPHkKjROrbHk7EI+co62CS9
w+89xxXRIvbwgz0RgNQVQLeKSdMTu3Wb7a0+0UBxa86OU/F2cjvQ5gXyvZJt
GoPBwQUvT1Q330Jimk8MuCFhrGePa9Kt8Mz6+ob3QQurqDa5/e3WPtOcpK/H
h2stfgpfCp+2cs23sRvgdn27GUKfMkOfMZUqc/oqrR44dA0zNGFb8membzeC
nXN/oLF0+3EjgDODSmNMdzF/FkgmBYYkSmbHhxbGD2EuzyzbJZu0qG83QrW8
jvLMtBnp2kDvVYwvmd6XhDKMd7apdki7ocLnHDdE2LAJK/p2MzR2Tp4ILjRt
2OLeCbRXlHzyi02oukXsnFA7iF25uILyjLAS38OKvt0MohWJN8a/R2xu3fH5
IrDeh4cc0Ax/DCTUZoYy463PD1AofTEPONuPW9S3b4doqgudflDAp5kd39Cs
Y157t3Fz37yxvNbjdn27GaA9vEQ1+ARiC+h8wahkRCgtqx08d4/kH0WdErm0
91k03El8ctZ6GeWG6iLlnmnk5E8MmWgM/Ispgbk7trS+/GPBtSYHZU5W0JzJ
bUyptVnsy6Z3lXwdfxwxUvFBerIqxiNuZbKdNdi02E0R97raTAMwzG4vPPFY
tfczPG4HdOSHqRyw02wSO6ApjcZLM+cip9E60+2DvSLd5nY18aaO+mAnhZ9N
g5rTWnilOMIY38widLo3p04UGoKDOQ25bJqCuUTF+g/2lkklI+CH8ltwqDTP
Bs7LnYj9k2F0cjEF1XgpggJ/sa+r61on3DJVQn56YXrAhmcnX185UXjjhR1z
2m6HXDKNizoy3lVrdnxjUxtAi7QYndhprC8pwXRXLtrePWegd3S61+7ZteoW
bG5s0q4VteV9MOk91MskIc9prfY+UzjE7WqN9qdQoiHOjBFtucySwFTTFKtf
AICgHqRy7iaW20Ps6/JVlGekUubOoHzQWaDLbGwLo1FVNfrjEdzMzGdIOlDA
LzlLvA30Yr0YlysMvOqGYQ4Ic3K0sbosjog4S8VeBla3mIr0i8FoB4eeGmSz
2KJS/nXOibQm9Ce4JCMUMjH+oe9QC9PsODyj6MoXiHaS27+xKb2+Kc2umQcY
6+mEoNry+C+J3qtjWZyHTFObAawdcFqXrMYINYND3A4Yn5YZIwAbABdQGY2q
eWwhxeoehVaryylqtZPY37rbaDcitjo1r61o+/EyxuBxX/NowB8bOD7tdFGw
zfiEgFtB9JpqxzZy7h5Y1Le7Edv17UbodJuE2FP25C/TbG6cJtxCf6rJGeWK
DC7MGJLdFEnc3JCyx1oHSXUnfbsp1uVKtFe2Pab7261bxy6+31iV4saAwJ8R
nejW4isE07w8G5p1sHDAh3WoHpv69u0orx8G691UxKtVa6iXX3RhLUyx7jnA
7wp9xox4UWHnVkSldAXtFWUzkrZNfft2gNF+ixGbykNt/4hC6Tt1ovAjRZze
jpRGJJDJoh3EzueLzpwi7BQJx7q+3XV8JH27G2FRJ2MEGMb01Jv21AOD7DnS
nfx2C0O/e6En9rjTfI6FFCqoTspl6n0nhPfWdTLvi+U0cpPsjU8I9F7FeNTe
iHAlpuhuwChHn33YbFCDn1bPthB3yDrs1ECaISmfG/nygy0GSpkCfyxuiGk5
a8xewapSE/ioJD6rdnvY3p1Qn0i0Io8xwk6djBkU6rULZMvLZ0RiD9C7VPpx
I/0CHtekf51zwh5tGyD4FoNVbiGanwH26GRcwcfTQLoL1rldb7rHnZ4dtmsn
8v/f3rmwJZW1fbxP1DfonfeZead5GkmdrJ5xxrIysZoONtaUmU5ZaU6WVmqi
InIGARVR8Xwgz4qKJh7xgKIclKOAiMS71BlDUdhsNgd79u/y8kIOe2+Q9V/3
Wuu/7ltr1sdwHmR+LLT5bAHCqFUxn/0qrCU6P4TroUEcxzkDUdvX9esgdNdI
oa4uff78WVD3ikOMMbubNgxaFnrniBicZm7PQpuws4ReGAkjiT08bQcxLTa5
fN9GbI1UQQpNnu8SH/aqIGdVa4x+wHpH6oC+NLZTVdZicJ9VGJ62AzRmHYjQ
DtwSQqcNgSDZd9E76OCIQg4QEOfyCgcyNLjkImi3o9ruTtvt2/s999Xac4HR
YrpV+eQBP+PARG1eAoQdd/t/+muKnR+6yf0TdPd6uLVuIWo7YIja35C8f5Lf
NX0fixhFvxh0R8+8p5pQgL5sX7a0uekOyoczBr0CxgHhabt9OxdB2HVS95DU
8U7F6FxJSJJyTHrYq4IWxYrh57t0QplnPq7ah0UiRguUZ8LWdvu2OwI0pZP4
C84PUSmDv0YydutoIwgYa//BT79b9cwIedAdc5ldX+dquTP4td21v917DvO3
O8LJiJEMNEM8IOh/01vzoln3nF1V3mA2aMAIwnnxFIwRstqLL5YmgG4F9sFd
+9sdsa5bKRFFy6JFj44/ImST88JV8kPHj0GITqYlhxfMCvZ8N7aqoOZglMsw
9xBB97c7MzqtwMQRJdI9X6q5jk9bFbQXA2zD9ojp+dWImxROnWdpW5ZFEmrE
U4gGIej+9gOx2jajmHfzusjOD5FJA9+cwEkkSDZtuUEF5OKvNhz0uanmpmns
VY7rIQ9EfztsfO1v9w/L0yJqylmPykBTh7jhZOyADJm8Q2saJf3pz85TMZbN
DTBGuMN7avDjnPZUwzgnhuapy3R2UlDyPmR++mhsnDdrTfSfCaPlIsc71/RK
0EPNHlS4CiKe+mT20dIjibhFBTG8453iyk7a+WemI2J6F36SYbDEpi6PrR0V
199O1vkvSSMYAv/GTSnqYzhPfdfyJxBcWgUSEUqKZXqyKG82W8+eoYwM+7uW
69dKEzG1m/vBo5eA/1o4OY7Qz4LeHR+IRj5HST4z1Ejbd/+yXhnDeZDWkuv/
tDZlWPpErcczvYqlUVJumPMOuGADjE3AG+zB7emGLOsGFiFa5N1aOcScAy5g
VIt+TWBq9XtG7n14PifmNbLVG31BTdtE6DXS0JjHe/mn6vvBG/Rzfo+NTWtq
07toVsKS0/wbk7G1tLq05JXHHoy4i/tLMcQYoWzEoxfii/pSn7rJAYICHaNu
hZh4GsisR69aMWoSql/EliXOaTybxNhFMTdKehQ62bs/E2PrTDfo7tnuEg/6
CMXoMjm80OqU6sEtOo2MURTZ3eoqD1tgsW3a+H9UtLzY84FvWIwV1OvCrgOW
sD3Cy7h9h3x6T+zjMtPeD781nV5zD+frCuzegGP0nI+nSZc8nqy2rluoEU/l
I7M+uCj3MEQ8IL9tM/stSZWVYhA8T0/DKU4HmNfIsOWPgDh4an6YmVn9v28L
V1aOtvdshwD62/chbudy/oqBETxwxQ2nCJfB+M7TBdYFcU/Jg5D5T3sStWlM
upSGN5GMO2NKxPYsQPG376Pxz5reAjgTLOtmPZd+U9hZYg2yJMk7tGU0VCeU
ORYBBxeMe3WiD4nEQTD87QeSjmsFUumYKRF0SUDbW9LoLl4VKIwmC57ddy2l
XKOH8x/vLahuenrA1LcLYPjbXTCulPzCuPOkMXvfLtHWFkkohuhpSjHL5gaQ
AtBfwKiDZrN9xl7lVPFceT92Qf3tbn0yjlTnJhxoU3GLyqgG47ufyHGV4kaI
UzSSgWZiIkY+82XGHnQNtKFK8K3A9dAgOmAhAt0ns4tRtUbE4HSLcDwDtk1r
W21GKeGic1LowNJP6GZfoTrWmrdurANhF/Uio5mwfTLOPM9rvvSQ5ZhMzGq2
lMW+6S0MzFDuMGYWViPv0jPxAqvLYtOHoVtUlYQkGVc889B645M5ENDcCnrp
ISVXQAN0jNB2UooBkYdyEKtts3y0LpyMBVIAZWuSM8X4vgd/uM+4vkPw+2SC
SttNejU5KRyi3d0ZEADcq0kLJ8dRBitcV27qryFQU86ql2Z3/gRPJg2UgW8F
iNghpnb0CBjaDhguHaiK57h/3iGIh7jE3NPeLE0iy1jVJ+o5vEn9ZbS7YTH1
CHAtNWlIzfQiqO327WRiOZQux+jdrDHQ//M8eDK9N3ZOYbDEWgF8f1TlrZwR
FqRMF44gru07SLVLoAGCZgga464LXSJZPRdBJZMGXLwQBPzUIW4oKfZ+Tfph
RfHcAvqRM+Fk6LMxqLZ7pO327fyQpEdha1r4lzSpmk1ryTtFuPR79XPQj++b
igeBYjf3Q/nrOKNWJdMpQJz/gJ9xinA5rSXXsTg7ssDTdtumjRNDneDD3z6j
WBJTcWe7W/MCnm5uvnOGHF7guC3LbNKVkbGCulcILuEhq+3gwjIK22Iflzku
rW5leg9LmRV4tjyHOGBwmk3sOB9Pc1tAwQVjvC4wEoFRT9BH2r7DrHohoy0f
tF/QMKvGmmU6OdDba9hyIO8m057R9LxGBho40PPv8Rdetn6YUM3APqlCYfgp
jNTf78GyXfBrezD42/chamay0qMtJq9cZ2breuN0BxD5s9QbJ/EXYssS/+C/
TOO9zE3CZL78OY7z8MeSy6Cj/7Mhq2Gq3df1+6D72/ehmlSSwgocY11PARJa
w77PJl4J4PyMtHtr86ly/MvuKnAx9MLIvnZI6T3NerX+gBUbq95petkbf/th
FDB7gYTKFF+GgcpxacmPSUuDAUshtbCsxSaXP3jFNxjhT3obV3REzOPVaTjf
Ci/97VDYar9T7alN70AjBU31Kufh2XcPT6Xee1SVlVj36hLr/sniixHU66CB
t0i6XOfpdcvamuViFJPD9qy/Rv3t8OjgvGsmPbeYkVmtNlpMYsUUj59feP8H
NicTfBlG5BPBWW7bmb6iTv4DV0VMoDDczyTmYMSiQytC+g6ZUErE5Ms/fVkR
k850k3JDx6BdzDAhHvuW+hYbRR1zcMQpBVHHt82OYfmO2oSIT8YZXvPYj7El
g+Ivp1oWSYink+WfZn1xOtdUtYyFYEvK6j95Od5pSC7pLfBsB3Sg0Jr1oMG2
znS/LKX/EJeWy+WNKqaQ2nJiNFrAoOBDnq+GISjOtLOyaj7cXzcikEfavKar
K0xivohaWQyuIrxQsFk3WZcoEzWjXh5HvTLLIV2tYsav6ZWIXBgUlkWLW1kF
HLbZinrppNyw5UX3yT8B5mnCsWPxW5er5IIbuwZZfmqqEHwvrHOJx45lCL98
Q3yk7fbtPUGh10iMatGuoi70TYC4F8TwPjqjMyr12r2MmphHnNlFbwfaU/X9
zKiXmy5LpgYn09MrF6KYz1Kb9HoEthuAg3xzAvc6M1jWpP57aC/NYqVFG9Re
ZUqZ6qsnJ4V3cz9sWpG0vviT1WkVUEi3RffcYrNt7hR8GRGy/TADLx9ZImJw
i/1/q5/ZpOVz/iinxK0ZoC6m6Lszjidu7yIxC/917Hj3PypuNu+Ikjn/+DHq
9JeZGd9pu307Scu1lPLf06tV/0yRzXeOAnkHMbzvTrqDddNGrxKdukogVQzA
88M4YlTpwKBDNQlzS0jAWV+35uZ0nQknNzR4FaopFIaLUcysNx+RurBgI3j8
7Qcy0somPQqdFcHpWBWzo9zsm5y/YhRzAc7mB8Pfvg8hobvi+gHF0GGgWZVW
ld5lEaJlUh9OmcoGFopP5kq7/461p8SNJe9DegUFNqfiO46olTJHWl4cP56x
k/BKmXE8TLBvDKfkh4URHENYpPzth7FpsxE4/RgssbXn72W7+Y5R3Im74kpX
tey9ZFAsi7rPTHhZvbCMwFsD4w7e7dxBMtRU0geCrL8dHmNixaVo1vVr5eJR
OGnlBILZ8FASkyFy/9RDQP3tnvpknAESzUiN5OMeaJVQ36lsQliTd4+acna8
u9rPO6kPBJ5PxpGtJnmHLSxBLKP4zGQbreA8CKRXkduitcvsRwnuRPbqzJaF
Q6eR7XQlcvfJf8z8jMT4xL+Jx8ZTGUnHE7e79b1x+zZzqWGJY3s7imN7QfIt
OTAmUf6SwEh8XbuzwKqelQN590U24On51YT06vPxtLZe+A6QffQX1/Lu5HnZ
KHzqk/EIfs3Ef85R7yVUDwihyuzioi7pUd3P52mjsDqFXYLfJxP82m7fKhK6
MVBHIiaeri96PDfSsblxcMygkk701xDoT/9TmnZxrJPnOkT0J95ru33L2LBG
Di9Y6JtH5JLs21ucRoRsUm5oAzdZ6VSJHjZLQ4tETP5C75zZpOtqySHmYER9
DJjFu2Vb0+xbjVbfdPxY6tYNs1qmNIO/CVgsfw7cUAtYTbuhO7IeSBdYN22U
ykEQwOdQurR680LvOBHzGEHnDOg+HmbWht8gM6tF3k/C7CLtFpN/euK2rJJb
gkfb7dtFAysrxZejWUDkSwjCycmD1WxjY7OjYw6oeiiGSKMOWizepo9AtR0R
bd/BajGPdVRys37DJ5zk/HW1iZjazsrqYGW3kF9UvLlOuP9vempkV1mOYs7b
ZUfEQUTb7dsTHUDeDXIkHT5W6zpQeBDDc+k3p8cavazBOt85Q8TgpttFHU1v
i7NPtjdmGb1Lxbzlk8kgZESFUce25tWnqWHH/kVtexu2G5xjWV8U1W/avoNa
a8oqaT8VS3hP7hxu28oGPNfuVWJSIFNNXdM3nnDP3qaW1X+CWOEUIga5mng6
eXkYgSFAUGn7LuJRRc77zgtRzO+/K7p9szLtRUvWm4/ZWe3PU5uwVznf/m/h
ndu8Sq74n8Uabwl+bQ9Cf7tbgMjLZ0Yme+tG2tjgZ6KnVjY5YF4LXk8jbH+7
M5/KhphRJMsawjkJQVw9M9FaXfo7CLMF9ZkLc30wRH6sWkQIyanITSx++0N3
2wfoa6auserVamj7D3zhb3eLSm3Mo3Vj4oi/PWannEkbLGv39AibNlvfyEIm
XhCCLYlPqxL0zXqZ2tQZq9nCvpI5zGxF5Gh+8Ld7g1ZrHhiQ1fInmEwRq3S4
vm5yZHh5fR3hUTzqb0dBnI9vmqsTyj/bfLKOsKZXDvXSOKQYfPbJGvb9gS7S
wmyvce3QzY/goYXZnv4OAu1eCu5kOg//eErcGKgK3T71ybgGxNj17VMJz7jf
RX64fJNYUibsFklXNId6sMFD/SOLpIqBB6/4J68UX0spp/GGFCu+yhJfl4gX
EvYnO0VBQQkqbFYb7w6n4x0yMdhhrJv1IJLvaHrLpd0g5YYWvvmWijtbTokD
f1YybpVTsIyiSHz29yXvQyrpd0pvvaVHFejkSJbLgUEAtX2X1WX1qwtvnj5m
3nhS8e8YwveX8ZF36TGPODdTK28/511JZEf+zgB3ghD91rPKd6SO1p4ZncG3
26I/vmG3vmQEc4JiFBSUHSxGS+lFclee//ZcWDfWteoFxdKoTDoIfsANrVpq
3TCbdWbeHXZtYqUV6TEvDIJB2+3bEyC1D4t4t3PN2jWTeUO6rP00KR8Uy8DP
6JRiYVlr9uNn1ZVXybn62rIWjAmfUXxKkPvbvw6897c7Y9IYCac+fMwMZIGY
lWkl7XxxT357MBhN7b73t0MHfCA9+TxKxFPVuFcWZS/pwVWxov8y62DWcD+M
YPC3BxzU346gT+bogpRPZh9glE2NwANpRfzIUBivHiWFFkiaXdWC9zN+9sm4
ZaZNVBKSNFHTG5Czt6bTQefii0qvwemT8TPB75NBtd0P+EjbASa1kXWJ0pHd
4s/IecNoaUiuZkVTNHMBnmDfR7BpO0AzJ2dGvWx+Rtkw+rXcal8Rn/lruo/m
2FFtt6Pajmr7Nr7Tdvv23DvvDqfuEQ9GfVUYLA0tUs/h27NaNhF1XyNCEGo7
YNNi/fiaTTv/bLEffhEN6GyY1ntwVZU3cywGk49OgWq7/Sho+1H0tx85EPS3
H4jNahNkNjF/Jfo0kAbhOpB08k+F812zvjuLNwTE3w4RabeYEvEUiDzQXt+d
ZXuYkP4xk2VDbjerM0Hub/cPqL8dxW9M1IqJmPzRCkjpcz3i8+fPY7wRcniB
4FUj4tumEMTXmWS8xGI0CzJLyeEpE3yfzMCPsAXFPzwM1PQ+CgqK79BI1eXX
GNzfStWz8Eut7WOhZ44TQ6u4zlSNe5VbyQ8Erao7ohyTlmOz2JdfLfQhNkWj
nl2uuP4W/Gil/kvOj4KC4mfE3GHiaVxbRoNB7lVWKEnLJFD10gskcAOpa/Mp
R0Lbd5A0DzKj0svjsmfaRN6sgxvk6rYMJik0GQTtMCqfonzFoP52P+ALf7ub
MxrWe3Ad+O9zGp/UyISe1QbSzKv7ijrJ4QXcG6VA1YPEuw6F4PG3QwF8sEDY
uTfekX960lfE10g9GxbJBqfqHxOKTz7sLazx3bLpgaD+djvqb0d9Mtv41Cfj
AovRMsIeZF+mlITkgzB+qnFct6hxftpn22dwv6R5sj2rhRlFpJwp6soRrEp8
+K3wEcHpk3HLqmSp830F5cwTRmRaR3aZpGVIu6A8MAgH90/W9bem00F3sJX7
q7TNz9bKHVCfjP0o+GRQbfcDgdL2XbRS9XDpQP3jKkpEEe5ENvUcvvQiuSyW
zrpEoUbgi757D/S8Lok3SO1TTR7hCdsjqu27rEwtDtGaaxOLgHQXfXefei6V
GZVeFvsGyDg5/M+Cb36nnX9Wl4gfZrbqZIitp8AA1XY7qu2otm8TcG13xGbd
1C/rgIYrx+UrU0qDXGezfiXztEdd2x0B/yaDXK2aXFSOScFv/dJq8CT7QrXd
fhS0HfW3+wFf+9tRdghmf/vXBOpvt6P+dhQUP3KEfDIoKCgoKBBBtR0FBQXl
6wPVdhSUXVB/ux/wv7/9v5Oj5W8/uqD+dntw+Nv/H8Fqci0=
    "], {{0, 309}, {500, 
    0}}, {0, 255},
    ColorFunction->RGBColor],
   BoxForm`ImageTag["Byte", ColorSpace -> "RGB", Interleaving -> True],
   Selectable->False],
  BaseStyle->"ImageGraphics",
  ImageSize->Automatic,
  ImageSizeRaw->{500, 309},
  PlotRange->{{0, 500}, {0, 309}}]], "Output",
 ImageSize->{504, 309},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellLabel->"Out[221]=",
 CellID->727079008]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Boundary conditions", "Subsection",
 CellID->2112455044],

Cell["\<\
Assuming one has done the rescaling in the previous section, there are now \
two solutions near the boundary, where the one we want remains finite and the \
other diverges. Since we represent the function as a sum of the cardinal \
functions (shown above), and these functions are all finite, this condition \
is implemented automatically by the choice of this set of basis functions.\
\>", "Text",
 CellID->10743530],

Cell["\<\
Near the horizon the solution we want (the ingoing one) goes smoothly to a \
constant, while the one we do not want oscillates more and more rapidly \
closer to the horizon. Luckily, again our basis functions match the behaviour \
of the solution we want: they go smoothly to a constant. So the correct \
solution is automatically picked up.\
\>", "Text",
 CellID->1738386601],

Cell["\<\
Hence writing the equation in Eddington-Finkelstein coordinates and working \
with a Chebyshev grid will implicitly solve both boundary conditions, we do \
not have to worry about them further.\
\>", "Text",
 CellID->1886024033]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Generalized Eigenvalue Equation", "Section",
 CellID->1062523101],

Cell["\<\
The simplest type of quasinormal mode equation is of the form\
\>", "Text",
 CellID->1528765870],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       SubscriptBox["c", "0"], "(", 
       RowBox[{"u", ",", "\[Omega]"}], ")"}], 
      RowBox[{"\[Phi]", "(", "u", ")"}]}], " ", "+", " ", 
     RowBox[{
      RowBox[{
       SubscriptBox["c", "1"], "(", 
       RowBox[{"u", ",", "\[Omega]"}], ")"}], 
      RowBox[{"\[Phi]", "'"}], 
      RowBox[{"(", "u", ")"}]}], "+", 
     RowBox[{
      RowBox[{
       SubscriptBox["c", "2"], "(", 
       RowBox[{"u", ",", "\[Omega]"}], ")"}], 
      RowBox[{"\[Phi]", "''"}], 
      RowBox[{"(", "u", ")"}]}]}], "=", "0"}], TraditionalForm]], 
  "InlineMath"],
 ","
}], "Text",
 Deletable->True,
 CellID->1636640841],

Cell[TextData[{
 "where each of the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["c", "i"], TraditionalForm]], "InlineMath"],
 " are linear in ",
 Cell[BoxData[
  FormBox["\[Omega]", TraditionalForm]], "InlineMath"],
 ": ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["c", "i"], "(", 
     RowBox[{"u", ",", "\[Omega]"}], ")"}], "=", 
    RowBox[{
     RowBox[{
      SubscriptBox["c", 
       RowBox[{"i", ",", "0"}]], "(", "u", ")"}], "+", 
     RowBox[{"\[Omega]", " ", 
      RowBox[{
       SubscriptBox["c", 
        RowBox[{"i", ",", "1"}]], "(", "u", ")"}]}]}]}], TraditionalForm]], 
  "InlineMath"],
 "."
}], "Text",
 Deletable->True,
 CellID->1395168574],

Cell[TextData[{
 "When we discretize the radial variable using the spectral methods as above, \
",
 Cell[BoxData[
  FormBox["u", TraditionalForm]], "InlineMath"],
 " becomes a vector and the derivatives are represented by matrices."
}], "Text",
 Deletable->True,
 CellID->721735607],

Cell[TextData[{
 "Very concretely what we do is first to collect the powers of the frequency ",
 Cell[BoxData[
  FormBox["\[Omega]", TraditionalForm]], "InlineMath"],
 " in the equation. For each of these we compute the discretized coefficient \
of each derivative of the function ",
 Cell[BoxData[
  FormBox["\[Phi]", TraditionalForm]], "InlineMath"],
 ", then multiply it with the corresponding derivative matrix and add them."
}], "Text",
 Deletable->True,
 CellID->1310912195],

Cell["This brings the equation in the form", "Text",
 Deletable->True,
 CellID->739824142],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      SubscriptBox["M", "0"], "+", 
      RowBox[{"\[Omega]", " ", 
       SubscriptBox["M", "1"]}]}], ")"}], "\[Phi]"}], "=", "0"}], 
  TraditionalForm]], "InlineMath"]], "Text",
 Deletable->True,
 CellID->544592701],

Cell[TextData[{
 "where the ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["M", "i"], TraditionalForm]], "InlineMath"],
 " are now purely numerical matrices. Explicitly,"
}], "Text",
 Deletable->True,
 CellID->1659568876],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   SubscriptBox["M", 
    RowBox[{"0", ",", "ij"}]], "=", 
   RowBox[{
    RowBox[{
     RowBox[{
      SubscriptBox["c", "0"], "(", 
      SubscriptBox["x", "i"], ")"}], 
     SubscriptBox["\[Delta]", "ij"]}], "+", 
    RowBox[{
     RowBox[{
      SubscriptBox["c", "1"], "(", 
      SubscriptBox["x", "i"], ")"}], 
     SuperscriptBox[
      SubscriptBox["D", "ij"], 
      RowBox[{"(", "1", ")"}]]}], "+", 
    RowBox[{
     RowBox[{
      SubscriptBox["c", "2"], "(", 
      SubscriptBox["x", "i"], ")"}], 
     SuperscriptBox[
      SubscriptBox["D", "ij"], 
      RowBox[{"(", "2", ")"}]]}]}]}], 
  TraditionalForm]], "InlineMath"]], "Text",
 Deletable->True,
 CellID->1698227968],

Cell[TextData[{
 "and similarly for ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["M", "1"], TraditionalForm]], "InlineMath"],
 "."
}], "Text",
 Deletable->True,
 CellID->1446509982],

Cell[TextData[{
 "In this form the equation has become a generalized eigenvalue equation, \
which can be solved using ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 "'s built in function Eigenvalues."
}], "Text",
 Deletable->True,
 CellID->1307832486]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Extension: coupled equations, higher powers of \[Omega]\
\>", "Section",
 CellID->443200371],

Cell["The above can be easily extended in a few directions.", "Text",
 CellID->2121721600],

Cell["Firstly, if we have a coupled system of equations, say:", "Text",
 CellID->378303749],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       SubscriptBox["c", "0"], "(", 
       RowBox[{"u", ",", "\[Omega]"}], ")"}], 
      RowBox[{"\[Phi]", "(", "u", ")"}]}], " ", "+", " ", 
     RowBox[{
      RowBox[{
       SubscriptBox["c", "1"], "(", 
       RowBox[{"u", ",", "\[Omega]"}], ")"}], 
      RowBox[{"\[Phi]", "'"}], 
      RowBox[{"(", "u", ")"}]}], "+", 
     RowBox[{
      RowBox[{
       SubscriptBox["c", "2"], "(", 
       RowBox[{"u", ",", "\[Omega]"}], ")"}], 
      RowBox[{"\[Phi]", "''"}], 
      RowBox[{"(", "u", ")"}]}]}], "=", "0"}], TraditionalForm]], 
  "InlineMath"],
 ","
}], "Text",
 Deletable->True,
 CellID->141532321],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       SubscriptBox["d", "0"], "(", 
       RowBox[{"u", ",", "\[Omega]"}], ")"}], 
      RowBox[{"\[Psi]", "(", "u", ")"}]}], " ", "+", " ", 
     RowBox[{
      RowBox[{
       SubscriptBox["d", "1"], "(", 
       RowBox[{"u", ",", "\[Omega]"}], ")"}], 
      RowBox[{"\[Psi]", "'"}], 
      RowBox[{"(", "u", ")"}]}], "+", 
     RowBox[{
      RowBox[{
       SubscriptBox["d", "2"], "(", 
       RowBox[{"u", ",", "\[Omega]"}], ")"}], 
      RowBox[{"\[Psi]", "''"}], 
      RowBox[{"(", "u", ")"}]}]}], "=", "0"}], TraditionalForm]], 
  "InlineMath"],
 ","
}], "Text",
 CellID->1425289929],

Cell[TextData[{
 "we may simply join the two functions ",
 Cell[BoxData[
  FormBox["\[Phi]", TraditionalForm]], "InlineMath"],
 " and ",
 Cell[BoxData[
  FormBox["\[Psi]", TraditionalForm]], "InlineMath"],
 " into a single vector ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{"\[Phi]", ",", "\[Psi]"}], ")"}], TraditionalForm]], "InlineMath"],
 " of twice the size."
}], "Text",
 Deletable->True,
 CellID->21938408],

Cell[CellGroupData[{

Cell[TextData[{
 "We split the equation into coefficients of ",
 Cell[BoxData[
  FormBox["\[Omega]", TraditionalForm]], "InlineMath"],
 " as before, but now the matrix ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["M", "0"], TraditionalForm]], "InlineMath"],
 " above becomes"
}], "Text",
 Deletable->True,
 CellID->236731165],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"\<\"\\!\\(\\*SubscriptBox[\\(M\\), \\(0, 1\\)]\\)(\[Phi])\"\>", \
"\<\"\\!\\(\\*SubscriptBox[\\(M\\), \\(0, 1\\)]\\)(\[Psi])\"\>"},
     {"\<\"\\!\\(\\*SubscriptBox[\\(M\\), \\(0, 2\\)]\\)(\[Phi])\"\>", \
"\<\"\\!\\(\\*SubscriptBox[\\(M\\), \\(0, 2\\)]\\)(\[Psi])\"\>"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 ImageSize->{120, 34},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellID->1629887900]
}, Open  ]],

Cell[TextData[{
 "where ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["M", 
     RowBox[{"0", ",", "1"}]], "(", "\[Phi]", ")"}], TraditionalForm]], 
  "InlineMath"],
 " is the coefficient of ",
 Cell[BoxData[
  FormBox["\[Phi]", TraditionalForm]], "InlineMath"],
 " in the part of the first equation that contains no ",
 Cell[BoxData[
  FormBox["\[Omega]", TraditionalForm]], "InlineMath"],
 ". The matrix ",
 Cell[BoxData[
  FormBox[
   SubscriptBox["M", "1"], TraditionalForm]], "InlineMath"],
 " above gets a similar modification, and we can solve the same generalized \
eigenvalue problem, but now with matrices of twice the size."
}], "Text",
 Deletable->True,
 CellID->224534168],

Cell[TextData[{
 "Further, we can generalize it to an equation which instead of linear in ",
 Cell[BoxData[
  FormBox["\[Omega]", TraditionalForm]], "InlineMath"],
 " is an arbitrary polynomial in ",
 Cell[BoxData[
  FormBox["\[Omega]", TraditionalForm]], "InlineMath"],
 ". Whether coupled or not, the procedure above will bring such a (system of) \
equation(s) in the form"
}], "Text",
 Deletable->True,
 CellID->1378548966],

Cell[TextData[Cell[BoxData[
 FormBox[
  RowBox[{
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{
        SubscriptBox["M", "0"], "+", 
        RowBox[{
         SubscriptBox["M", "1"], "\[Omega]"}], "+", 
        RowBox[{
         SubscriptBox["M", "2"], 
         SuperscriptBox["\[Omega]", "2"]}], "+"}], "..."}], "+", " ", 
      RowBox[{
       SubscriptBox["M", "p"], 
       SuperscriptBox["\[Omega]", "p"]}]}], ")"}], "\[Phi]"}], "=", "0"}], 
  TraditionalForm]], "InlineMath"]], "Text",
 Deletable->True,
 CellID->1077128890],

Cell[CellGroupData[{

Cell[TextData[{
 "We can rewrite this into an equation that is linear in ",
 Cell[BoxData[
  FormBox["\[Omega]", TraditionalForm]], "InlineMath"],
 " and acts on the vector ",
 Cell[BoxData[
  FormBox[
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["\[Phi]", 
      RowBox[{"(", "0", ")"}]], ",", 
     SuperscriptBox["\[Phi]", 
      RowBox[{"(", "1", ")"}]], ",", "...", ",", " ", 
     SuperscriptBox["\[Phi]", 
      RowBox[{"(", 
       RowBox[{"p", "-", "1"}], ")"}]]}], ")"}], TraditionalForm]], 
  "InlineMath"],
 ", with a matrix that looks like, for ",
 Cell[BoxData[
  FormBox[
   RowBox[{"p", "=", "3"}], TraditionalForm]], "InlineMath"],
 ":"
}], "Text",
 Deletable->True,
 CellID->61825957],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      SubscriptBox["M", "0"], 
      SubscriptBox["M", "1"], 
      RowBox[{
       SubscriptBox["M", "2"], "+", 
       RowBox[{"\[Omega]", " ", 
        SubscriptBox["M", "3"]}]}]},
     {
      RowBox[{"-", "\[Omega]"}], "1", "0"},
     {"0", 
      RowBox[{"-", "\[Omega]"}], "1"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 ImageSize->{119, 46},
 ImageMargins->{{0, 0}, {0, 0}},
 ImageRegion->{{0, 1}, {0, 1}},
 CellID->1959208299]
}, Open  ]],

Cell[TextData[{
 "The first row represents the actual equation, while the other rows enforce \
that ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["\[Phi]", 
     RowBox[{"(", "i", ")"}]], "=", 
    RowBox[{
     SuperscriptBox["\[Omega]", "i"], "\[Phi]"}]}], TraditionalForm]], 
  "InlineMath"],
 "."
}], "Text",
 Deletable->True,
 CellID->1227876],

Cell[TextData[{
 "Note that ",
 Cell[BoxData[
  FormBox["\[Phi]", TraditionalForm]], "InlineMath"],
 " here might already be a combination of several functions, in the case of a \
coupled system of equations."
}], "Text",
 Deletable->True,
 CellID->2029057168],

Cell[TextData[{
 "This generlizes straightforwardly to arbitrary powers of ",
 Cell[BoxData[
  FormBox["\[Omega]", TraditionalForm]], "InlineMath"],
 ", with the first row representing the actual equations, and apart from that \
identity matrices on the main diagonal and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "\[Omega]"}], TraditionalForm]], "InlineMath"],
 " on the diagonal below the main diagonal setting ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SuperscriptBox["\[Phi]", 
     RowBox[{"(", "i", ")"}]], "=", 
    RowBox[{
     SuperscriptBox["\[Omega]", "i"], "\[Phi]"}]}], TraditionalForm]], 
  "InlineMath"],
 "."
}], "Text",
 Deletable->True,
 CellID->323162344]
}, Open  ]],

Cell[CellGroupData[{

Cell["References", "Section",
 CellID->1035524837],

Cell["Some excellent reviews on numerical relativity are:", "Text",
 CellID->1460668628],

Cell[TextData[ButtonBox["P. M. Chesler and L. G. Yaffe, Numerical solution of \
gravitational dynamics in asymptotically anti-de Sitter spacetimes, JHEP 07 \
(2014) 086",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://arxiv.org/abs/1309.1439"], None}]], "Text",
 CellID->1140688258],

Cell[TextData[ButtonBox["O. J. C. Dias, J. E. Santos and B. Way, Numerical \
Methods for Finding Stationary Gravitational Solutions, (2015)",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://arxiv.org/abs/1510.02804"], None}]], "Text",
 CellID->682858425],

Cell[TextData[ButtonBox["P. Grandclement and J. Novak, Spectral Methods for \
Numerical Relativity, Living Rev. Relativity\[NonBreakingSpace]12 (2009)",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://relativity.livingreviews.org/Articles/lrr-2009-1/"], 
   None}]], "Text",
 CellID->1664822869],

Cell["and the standard reference on spectral methods is", "Text",
 CellID->2096338536],

Cell[TextData[ButtonBox["J. P. Boyd, Chebyshev & Fourier Spectral Methods, \
Courier Dover Publications (2001)",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["http://www.springer.com/us/book/9783540514879"], None}]], "Text",
 CellID->1979089624]
}, Open  ]],

Cell[CellGroupData[{

Cell["RELATED TUTORIALS", "RelatedTutorialsSection",
 WholeCellGroupOpener->True,
 CellID->415694126],

Cell[TextData[ButtonBox["Introduction",
 BaseStyle->"Link",
 ButtonData->"paclet:QNMspectral/tutorial/Introduction"]], "RelatedTutorials",\

 CellID->731816627],

Cell[TextData[ButtonBox["Simple Example",
 BaseStyle->"Link",
 ButtonData->"paclet:QNMspectral/tutorial/SimpleExample"]], "RelatedTutorials",\

 CellID->498253685],

Cell[TextData[{
 ButtonBox["Extensions",
  BaseStyle->"Link",
  ButtonData->"paclet:QNMspectral/tutorial/Extensions"],
 " "
}], "RelatedTutorials",
 CellID->1415367576],

Cell[TextData[ButtonBox["Method",
 BaseStyle->"Link",
 ButtonData->"paclet:QNMspectral/tutorial/Method"]], "RelatedTutorials",
 CellID->145118313]
}, Open  ]]
}, Open  ]],

Cell[" ", "FooterCell"]
},
Saveable->False,
ScreenStyleEnvironment->"Working",
WindowSize->{725, 750},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
WindowTitle->"Method - Wolfram Mathematica",
TaggingRules->{
 "ModificationHighlight" -> False, "ColorType" -> "TutorialColor", 
  "LinkTrails" -> GridBox[{{
      RowBox[{
        StyleBox[
         ButtonBox[
         "Mathematica", ButtonData -> "paclet:guide/Mathematica", 
          BaseStyle -> {"Link", "DockedLinkTrail"}], FontSlant -> "Italic"], 
        Cell[">", "DockedLinkTrailSeparator"]}]}}, ColumnAlignments -> Left], 
  "Metadata" -> {
   "built" -> "{2016, 10, 11, 17, 12, 35.597110}", 
    "history" -> {"0.0", "", "", ""}, "context" -> "QNMspectral`", 
    "keywords" -> {}, "specialkeywords" -> {}, 
    "tutorialcollectionlinks" -> {}, "index" -> True, "label" -> 
    "Q N Mspectral Tutorial", "language" -> "en", "paclet" -> "QNMspectral", 
    "status" -> "None", "summary" -> 
    "To find the quasinormal mode spectrum, we have to solve for a linearized \
perturbation on top of a black hole/black brane, with ingoing boundary \
conditions at the horizon, and normalizability at the boundary. It turns out \
that Eddington-Finkelstein coordinates are perfectly suited for this problem. \
By Eddington-Finkelstein coordinates we mean more specifically a metric of \
the form ds^2=-f(r) dt^2+2g(r) dt dr (+ spatial part), where f(r) is the \
blackening factor, and g(r) depends on the gauge of the radial variable.", 
    "synonyms" -> {}, "title" -> "Method", "titlemodifier" -> "", 
    "windowtitle" -> "Method", "type" -> "Tutorial", "uri" -> 
    "QNMspectral/tutorial/TechnicalDetails"}, "SearchTextTranslated" -> ""},
FrontEndVersion->"9.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (January 25, \
2013)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[
    StyleDefinitions -> FrontEnd`FileName[{"Wolfram"}, "Reference.nb"]]], 
   Cell[
    StyleData["Input"], CellContext -> Notebook], 
   Cell[
    StyleData["Output"], CellContext -> Notebook], 
   Cell[
    StyleData["TutorialMoreAboutSection"], 
    CellGroupingRules -> {"SectionGrouping", 30}], 
   Cell[
    StyleData["RelatedTutorialsSection"], 
    CellGroupingRules -> {"SectionGrouping", 30}], 
   Cell[
    StyleData["TutorialRelatedLinksSection"], 
    CellGroupingRules -> {"SectionGrouping", 30}]}, Visible -> False, 
  FrontEndVersion -> 
  "9.0 for Mac OS X x86 (32-bit, 64-bit Kernel) (January 25, 2013)", 
  StyleDefinitions -> "Default.nb"]
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[599, 21, 2721, 61, 70, "AnchorBarGrid",
 CellID->1],
Cell[CellGroupData[{
Cell[3345, 86, 43, 1, 70, "Title",
 CellID->509267359],
Cell[CellGroupData[{
Cell[3413, 91, 96, 1, 70, "Section",
 CellID->278927872],
Cell[3512, 94, 257, 5, 70, "Text",
 CellID->1685543347],
Cell[3772, 101, 221, 5, 70, "Text",
 CellID->65355837],
Cell[3996, 108, 491, 16, 70, "Text",
 CellID->374829256],
Cell[CellGroupData[{
Cell[4512, 128, 174, 4, 70, "Text",
 CellID->1617778002],
Cell[4689, 134, 861, 26, 70, "Input",
 InitializationCell->False,
 CellID->77585105]
}, Open  ]],
Cell[5565, 163, 614, 21, 70, "Text",
 CellID->660767926],
Cell[CellGroupData[{
Cell[6204, 188, 77, 1, 70, "Text",
 CellID->205460912],
Cell[CellGroupData[{
Cell[6306, 193, 785, 27, 70, "Input",
 InitializationCell->False,
 CellID->2112883632],
Cell[7094, 222, 746, 24, 70, "Output",
 CellID->1803722070],
Cell[7843, 248, 364, 13, 70, "Output",
 CellID->1277669438]
}, Open  ]]
}, Open  ]],
Cell[8234, 265, 369, 13, 70, "Text",
 CellID->1101258113],
Cell[8606, 280, 826, 23, 70, "Text",
 CellID->967003255],
Cell[9435, 305, 337, 6, 70, "Text",
 CellID->1933901115],
Cell[CellGroupData[{
Cell[9797, 315, 179, 4, 70, "Text",
 CellID->489084805],
Cell[CellGroupData[{
Cell[10001, 323, 689, 23, 70, "Input",
 InitializationCell->False,
 CellID->569349032],
Cell[10693, 348, 585, 20, 70, "Output",
 CellID->1862883090],
Cell[11281, 370, 316, 11, 70, "Output",
 CellID->1312004017]
}, Open  ]]
}, Open  ]],
Cell[11624, 385, 348, 11, 70, "Text",
 CellID->489426323],
Cell[11975, 398, 781, 20, 70, "Text",
 CellID->1754192859],
Cell[12759, 420, 83, 1, 70, "Text",
 CellID->592404874],
Cell[CellGroupData[{
Cell[12867, 425, 67, 1, 70, "Subsection",
 CellID->1478924877],
Cell[12937, 428, 343, 6, 70, "Text",
 CellID->664198110]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[13329, 440, 78, 1, 70, "Section",
 CellID->1481255430],
Cell[13410, 443, 300, 6, 70, "Text",
 CellID->1713154644],
Cell[13713, 451, 290, 6, 70, "Text",
 CellID->780243156],
Cell[14006, 459, 853, 31, 70, "Text",
 CellID->225188045],
Cell[14862, 492, 641, 22, 70, "Text",
 CellID->667655692],
Cell[15506, 516, 287, 6, 70, "Text",
 CellID->2034219487],
Cell[15796, 524, 203, 5, 70, "Text",
 CellID->1991738820],
Cell[16002, 531, 414, 18, 70, "Text",
 CellID->1421600843],
Cell[16419, 551, 418, 9, 70, "Text",
 CellID->616759975],
Cell[16840, 562, 284, 11, 70, "Text",
 CellID->988872173],
Cell[17127, 575, 919, 36, 70, "Text",
 CellID->1630184905],
Cell[CellGroupData[{
Cell[18071, 615, 337, 9, 70, "Text",
 CellID->1087114798],
Cell[CellGroupData[{
Cell[18433, 628, 2132, 70, 70, "Input",
 CellID->1104739231],
Cell[20568, 700, 67647, 1117, 70, "Output",
 CellID->727079008]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[88264, 1823, 62, 1, 70, "Subsection",
 CellID->2112455044],
Cell[88329, 1826, 427, 7, 70, "Text",
 CellID->10743530],
Cell[88759, 1835, 386, 7, 70, "Text",
 CellID->1738386601],
Cell[89148, 1844, 238, 5, 70, "Text",
 CellID->1886024033]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[89435, 1855, 71, 1, 70, "Section",
 CellID->1062523101],
Cell[89509, 1858, 106, 3, 70, "Text",
 CellID->1528765870],
Cell[89618, 1863, 708, 26, 70, "Text",
 CellID->1636640841],
Cell[90329, 1891, 689, 27, 70, "Text",
 CellID->1395168574],
Cell[91021, 1920, 282, 8, 70, "Text",
 CellID->721735607],
Cell[91306, 1930, 480, 11, 70, "Text",
 CellID->1310912195],
Cell[91789, 1943, 90, 2, 70, "Text",
 CellID->739824142],
Cell[91882, 1947, 310, 11, 70, "Text",
 CellID->544592701],
Cell[92195, 1960, 219, 8, 70, "Text",
 CellID->1659568876],
Cell[92417, 1970, 736, 27, 70, "Text",
 CellID->1698227968],
Cell[93156, 1999, 181, 8, 70, "Text",
 CellID->1446509982],
Cell[93340, 2009, 257, 8, 70, "Text",
 CellID->1307832486]
}, Open  ]],
Cell[CellGroupData[{
Cell[93634, 2022, 102, 3, 70, "Section",
 CellID->443200371],
Cell[93739, 2027, 90, 1, 70, "Text",
 CellID->2121721600],
Cell[93832, 2030, 91, 1, 70, "Text",
 CellID->378303749],
Cell[93926, 2033, 707, 26, 70, "Text",
 CellID->141532321],
Cell[94636, 2061, 690, 25, 70, "Text",
 CellID->1425289929],
Cell[95329, 2088, 427, 15, 70, "Text",
 CellID->21938408],
Cell[CellGroupData[{
Cell[95781, 2107, 325, 11, 70, "Text",
 CellID->236731165],
Cell[96109, 2120, 938, 23, 70, "Output",
 CellID->1629887900]
}, Open  ]],
Cell[97062, 2146, 697, 22, 70, "Text",
 CellID->224534168],
Cell[97762, 2170, 426, 11, 70, "Text",
 CellID->1378548966],
Cell[98191, 2183, 560, 19, 70, "Text",
 CellID->1077128890],
Cell[CellGroupData[{
Cell[98776, 2206, 707, 24, 70, "Text",
 CellID->61825957],
Cell[99486, 2232, 953, 30, 70, "Output",
 CellID->1959208299]
}, Open  ]],
Cell[100454, 2265, 362, 14, 70, "Text",
 CellID->1227876],
Cell[100819, 2281, 260, 8, 70, "Text",
 CellID->2029057168],
Cell[101082, 2291, 680, 21, 70, "Text",
 CellID->323162344]
}, Open  ]],
Cell[CellGroupData[{
Cell[101799, 2317, 50, 1, 70, "Section",
 CellID->1035524837],
Cell[101852, 2320, 88, 1, 70, "Text",
 CellID->1460668628],
Cell[101943, 2323, 291, 6, 70, "Text",
 CellID->1140688258],
Cell[102237, 2331, 262, 5, 70, "Text",
 CellID->682858425],
Cell[102502, 2338, 302, 6, 70, "Text",
 CellID->1664822869],
Cell[102807, 2346, 86, 1, 70, "Text",
 CellID->2096338536],
Cell[102896, 2349, 247, 5, 70, "Text",
 CellID->1979089624]
}, Open  ]],
Cell[CellGroupData[{
Cell[103180, 2359, 101, 2, 70, "RelatedTutorialsSection",
 CellID->415694126],
Cell[103284, 2363, 160, 4, 70, "RelatedTutorials",
 CellID->731816627],
Cell[103447, 2369, 163, 4, 70, "RelatedTutorials",
 CellID->498253685],
Cell[103613, 2375, 168, 6, 70, "RelatedTutorials",
 CellID->1415367576],
Cell[103784, 2383, 146, 3, 70, "RelatedTutorials",
 CellID->145118313]
}, Open  ]]
}, Open  ]],
Cell[103957, 2390, 23, 0, 70, "FooterCell"]
}
]
*)

(* End of internal cache information *)
